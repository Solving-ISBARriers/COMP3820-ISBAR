{"version":3,"sources":["Launcher.js","IsbarFhirClient.js","app-simple/SimplePDF.js","common/SimpleTextArea.js","common/FHIRAutocomplete.js","app-simple/IsbarSimpleApp.js","app-complex/Assessment.js","app-complex/Background.js","app-complex/Introduction.js","app-complex/Recommendation.js","app-complex/Situation.js","app-complex/IsbarComplexApp.js","app-complex/IsbarContentField.js","app-complex/IsbarComplexDevelopment.js","common/DisplayHelper.js","SimpleHistory.js","Home.js","App.js","index.js"],"names":["Launcher","SMART","authorize","clientId","scope","redirectUri","completeInTarget","className","React","Component","IsbarClientContext","createContext","IsbarClientProvider","props","state","client","error","simpleForms","complexForms","ready","then","setState","Provider","value","this","Consumer","console","log","stack","children","styles","StyleSheet","create","page","backgroundColor","margin","padding","section","heading","fontSize","SimplePDF","content","item","forEach","element","index","answer","valueString","size","style","SimpleTextArea","timeout","delay","handleChange","bind","initialValue","clearTimeout","event","target","setTimeout","updateField","visible","TextField","fullWidth","multiline","placeholder","onChange","sx","display","FHIRAutocomplete","answerSet","updatAnswerSet","queryString","resourceName","query","context","request","res","entry","Autocomplete","id","options","renderInput","params","label","contextType","IsbarSimpleApp","loaded","isIsobar","isNew","uploaded","practitioners","updateFieldValue","questionnaireID","patientID","sourceID","newForm","patient","user","resourceType","text","name","questionnaire","status","subject","reference","author","linkId","formID","getAllPractitioner","uploadToServer","update","hasOwnProperty","pageLimit","resultArray","push","prevContent","Stack","spacing","Typography","variant","Grid","FormControlLabel","control","Switch","labelPlacement","checked","getFieldValue","document","fileName","blob","url","loading","Assessment","Background","Introduction","Recommendation","class","rows","AirwaySelect","useState","setAirway","Box","minWidth","FormControl","InputLabel","Select","labelId","MenuItem","Situation","responseExist","questionnaireResponse","saveState","formState","IsbarComplexApp","IsbarContentField","current","carePlan","LoadCarePlan","onClick","getSimpleName","prefix","given","family","SimpleHistory","fields","field","headerName","description","flex","cellClassName","align","headerAlign","width","entries","data","updateTable","newContent","total","resource","lastUpdated","recipient","action","meta","time","date","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getDateTimeString","extension","valueReference","forceUpdate","cellParam","colDef","editForm","height","columns","pageSize","rowsPerPageOptions","disableColumnMenu","disableSelectionOnClick","onCellClick","param","Home","AppController","isMenu","isSimple","simpleResponses","createNew","simpleFormID","editSimpleForm","loadSimple","loadQuestionnaireID","loadSimpleIsbars","Promise","all","isbarQuestionnaire","response","result","catch","resolveReferences","filter","textAlign","Accordion","defaultExpanded","AccordionSummary","expandIcon","flexShrink","Button","AccordionDetails","goBack","backToMenu","App","path","component","exact","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f838747f.chunk.js","sourcesContent":["// Launcher file for the app. \r\nimport React from \"react\";\r\nimport { oauth2 as SMART } from \"fhirclient\";\r\n\r\n/**\r\n * Typically the launch page is an empty page with a `SMART.authorize`\r\n * call in it. This isbased on the example code from:\r\n * https://codesandbox.io/s/fhir-client-react-react-router-context-0q3n8?file=/src/components/Launcher.js\r\n * \r\n *\r\n */\r\nexport default class Launcher extends React.Component {\r\n    \r\n    /**\r\n     * This is configured to make a Standalone Launch, just in case it\r\n     * is loaded directly. An EHR can still launch it by passing `iss`\r\n     * and `launch` url parameters\r\n     */\r\n    componentDidMount() {\r\n        \r\n        SMART.authorize({\r\n            clientId: \"my-client-id\",\r\n            scope: \"launch openid fhirUser patient/*.read patient/*.write\",\r\n            redirectUri: \"./isbar-app\",\r\n            \r\n            // Redirect to main screen.\r\n            \r\n            completeInTarget: true\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"loading-container\">\r\n                Launching the ISBAR handover form..\r\n            </div>\r\n            )\r\n    }\r\n}","// This is the file to deal with fhir client\r\n// Client context is created and updated.\r\n\r\nimport React from \"react\";\r\nimport { client, oauth2 as SMART } from \"fhirclient\";\r\n\r\n// React client context so it is accessible in differernt parts of code.\r\n// by exporting, it should be accessible from various part of the code.\r\nexport const IsbarClientContext = React.createContext({});\r\n\r\nexport class IsbarClientProvider extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n            client: null, // client object\r\n            error: null, // error message\r\n            simpleForms: null, // simple isbar forms (questionnaireResponses)\r\n            complexForms: null // complex isbar forms ()\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Wait until the SMART client is ready, then save the client object as its state.\r\n        SMART.ready().then(\r\n            (client) => this.setState({ client }),\r\n            (error) => this.setState({ error })\r\n        )\r\n        // Load the relevant resources\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            // When the client is not loaded, it displays authorizing message.\r\n            // Once the client is loaded, display the child components.\r\n            <IsbarClientContext.Provider value={this.state || {}}>\r\n                <IsbarClientContext.Consumer>\r\n                    {({ client, error }) => {\r\n                        console.log(\"Client\");\r\n                        console.log(client);\r\n                        // any error that SMART.ready() may have been rejected with\r\n                        if (error) {\r\n                            return <pre>{error.stack}</pre>;\r\n                        }\r\n\r\n                        // if client is already available render the subtree (patient and input in this case.)\r\n                        if (client) {\r\n\r\n                            return this.props.children;\r\n                        }\r\n                        // client is undefined until SMART.ready() is fulfilled. show loading message\r\n                        return (\r\n                            <div className=\"loading-container\">\r\n                                Launching the ISBAR handover form..\r\n                            </div>\r\n                        )\r\n                    }}\r\n                </IsbarClientContext.Consumer>\r\n            </IsbarClientContext.Provider>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Document, Page, View, Text, StyleSheet, Font } from '@react-pdf/renderer';\r\n\r\n// have to include them as a local file. probs.\r\n// Font.register({\r\n//     family: 'OpenSans',\r\n//     src: \"https://fonts.googleapis.com/css2?family=Open+Sans\",\r\n\r\n//     fontStyle: 'normal',\r\n//     fontWeight: 'normal'\r\n// });\r\n\r\n// Font.register({\r\n//     family: 'Oswald',\r\n//     src: 'https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf'\r\n// })\r\n\r\n// This is the pdf file that will be generated\r\n\r\nconst styles = StyleSheet.create({\r\n    page: {\r\n        // fontFamily: 'OpenSans',\r\n        backgroundColor: '#FFFFFF',\r\n        margin: 10,\r\n        padding: 20,\r\n    },\r\n    section: {\r\n        margin: 15\r\n    },\r\n    heading: {\r\n        fontSize: '16pt',\r\n    }\r\n});\r\nexport const SimplePDF = (props) => {\r\n\r\n    var content = [\"N/A\", \"N/A\", \"N/A\", \"N/A\", \"N/A\"]\r\n    props.content.item.forEach((element, index) => {\r\n        if (typeof element.answer !== 'undefined') {\r\n\r\n            content[index] = element.answer[0].valueString\r\n        }\r\n    });\r\n    return (\r\n        <Document>\r\n            <Page size=\"A4\" style={styles.page}>\r\n                <View style={styles.section}>\r\n                    <Text style={styles.heading}>I: Introduction</Text>\r\n                    <Text>{content[0]}</Text>\r\n                </View>\r\n                <View style={styles.section}>\r\n                    <Text style={styles.heading}>S: Situation</Text>\r\n                    <Text>{content[1]}</Text>\r\n                </View>\r\n                <View style={styles.section}>\r\n                    <Text style={styles.heading}>B: Background</Text>\r\n                    <Text>{content[2]}</Text>\r\n                </View>\r\n                <View style={styles.section}>\r\n                    <Text style={styles.heading}>A: Assessment</Text>\r\n                    <Text>{content[3]}</Text>\r\n                </View>\r\n                <View style={styles.section}>\r\n                    <Text style={styles.heading}>R: Recommendation</Text>\r\n                    <Text>{content[4]}</Text>\r\n                </View>\r\n            </Page>\r\n        </Document>\r\n    )\r\n}\r\nexport const IsobarDoc = (props) => {\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport TextField from '@mui/material/TextField'\r\n\r\n// this text area calls parent callback 5 secs after no button press.\r\n// updateField callback function given as the prop will fire when \r\n// there is no input for specified timeout duration.\r\n// this was added to optimise the update process.\r\nexport default class SimpleTextArea extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            value: \"\",\r\n            timeout: null,\r\n            // timeout delay\r\n            delay: 5000\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ value: this.props.initialValue })\r\n    }\r\n    \r\n    // clear timeout when user is in different screen\r\n    componentWillUnmount(){\r\n        clearTimeout(this.state.timeout)\r\n    }\r\n    handleChange(event) {\r\n\r\n        // set the value of this field\r\n        this.setState({ value: event.target.value });\r\n        // clear the timeout\r\n        clearTimeout(this.state.timeout)\r\n        // set the timeout\r\n        this.setState({\r\n            timeout: setTimeout(() => { this.props.updateField(this.state.value) },\r\n                this.state.delay)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.props.visible) {\r\n            return (\r\n                <TextField fullWidth multiline\r\n                    placeholder={this.props.placeholder}\r\n                    value={this.state.value}\r\n                    onChange={this.handleChange}\r\n                />\r\n            )\r\n        } else {\r\n            return (\r\n                <TextField fullWidth multiline\r\n                    placeholder={this.props.placeholder}\r\n                    value={this.state.value}\r\n                    onChange={this.handleChange}\r\n                    sx={{\r\n                        display: 'none'\r\n                    }}\r\n                />\r\n                )\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport { Autocomplete, TextField } from \"@mui/material\";\r\nimport { IsbarClientContext } from \"../IsbarFhirClient\";\r\n\r\n// autocomplete that displays values based on fhir search query.\r\n// takes in fields as props\r\n// should return the target resource\r\nexport default class FHIRAutocomplete extends React.Component {\r\n    \r\n    static contextType = IsbarClientContext;\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            answerSet:[],\r\n            // value for text input\r\n            value: \"\"\r\n            \r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.updatAnswerSet()\r\n    }\r\n\r\n    updatAnswerSet(){\r\n        var queryString = this.props.resourceName + \"?\"\r\n        this.props.query.forEach((element, index) => {\r\n            index === 0 \r\n            ? queryString = \"?\" + queryString \r\n            : queryString = \":\" + queryString\r\n            queryString = queryString + element\r\n        })\r\n        this.context.client.request(queryString)\r\n        .then((res) => {\r\n            const resources = []\r\n            res.entry.forEach(element => {\r\n                // need to give it label property and all that\r\n                // resources.push(element.resource)\r\n            })\r\n            this.setState({answerSet: resources})\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Autocomplete \r\n            id={this.props.id}\r\n            options={this.state.answerSet}\r\n            renderInput={(params) => <TextField {...params} label=\"input\"/>}\r\n            />\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport { IsbarClientContext } from \"../IsbarFhirClient\";\r\nimport { SimplePDF } from \"./SimplePDF\";\r\nimport { PDFDownloadLink } from \"@react-pdf/renderer\";\r\nimport SimpleTextArea from \"../common/SimpleTextArea\";\r\nimport { Stack, Grid, Typography, Slider } from '@mui/material'\r\nimport { FormGroup, FormControl, FormControlLabel, Switch } from \"@mui/material\";\r\nimport FHIRAutocomplete from \"../common/FHIRAutocomplete\";\r\n\r\n\r\n// Class for the input field group.\r\nexport class IsbarSimpleApp extends React.Component {\r\n\r\n  // the this.context.client is the client object!!!\r\n  static contextType = IsbarClientContext;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n      loaded: false,\r\n      // questionnaire response object\r\n      content: null,\r\n      // turns true if it's isobar\r\n      isIsobar: false,\r\n      // indicates saved state\r\n      isNew: false,\r\n      // indicates updated state.\r\n      uploaded: true,\r\n      practitioners: []\r\n    };\r\n\r\n    this.updateFieldValue = this.updateFieldValue.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(this.props.create)\r\n    if (this.props.create) {\r\n      // create new resource and store that \r\n      // now the question is.. do we have to create the resource in the server?\r\n      // no, we include a publish button for now, because it may result in many duplicates.\r\n      // this.createSimpleIsbar()\r\n      // new form targets to current practitiner?\r\n      const newForm = newQuestionnaireResponse(\r\n        this.props.questionnaireID,\r\n        this.context.client.patient.id,\r\n        this.context.client.user.id)\r\n      // always create a new form when approached this way\r\n      this.context.client.create(newForm)\r\n        .then((res) => {\r\n          // console.log(res)\r\n          this.setState({ content: res, loaded: true })\r\n        })\r\n    } else {\r\n\r\n      // note we are not directly modifying the file in parent.\r\n      // parent will fetch the updated version via database query\r\n      this.context.client.request(\"QuestionnaireResponse/\" + this.props.formID)\r\n        .then((res) => this.setState({ content: res, loaded: true }))\r\n    }\r\n    // get all the practitioners\r\n    this.getAllPractitioner()\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.uploadToServer()\r\n  }\r\n\r\n  // function to send upload request\r\n  // checks if requires uploading\r\n  uploadToServer() {\r\n    if (!this.state.uploaded) {\r\n      this.context.client.update(this.state.content)\r\n        .then((res) => {\r\n          this.setState({ uploaded: true })\r\n          console.log(res)\r\n        })\r\n    }\r\n  }\r\n\r\n  getFieldValue(index) {\r\n    return this.state.content.item[index].hasOwnProperty('answer')\r\n      ? this.state.content.item[index].answer[0].valueString\r\n      : \"\"\r\n  }\r\n\r\n  getAllPractitioner(){\r\n\r\n    this.context.client.request(\"Practitioner\", {pageLimit:0})\r\n    .then((res) => {\r\n      // this processing is based on smart cilent api. may not be suitable for big systems\r\n      // with thousands of practitioners?\r\n      const resultArray = []\r\n      res.forEach(element => {\r\n        element.entry.forEach(element => {\r\n          resultArray.push(element)\r\n        })\r\n      });\r\n      console.log(resultArray)\r\n      this.setState({practitioners:resultArray})\r\n      console.log(res)\r\n    })\r\n  }\r\n\r\n  // update the isbar form field of given index to the value given\r\n  updateFieldValue(value, index) {\r\n    const prevContent = this.state.content\r\n    if (prevContent.item[index].hasOwnProperty('answer')) {\r\n      prevContent.item[index].answer[0].valueString = value\r\n    } else {\r\n      prevContent.item[index].answer = [{\r\n        valueString: value\r\n      }]\r\n    }\r\n    this.setState({ content: prevContent, uploaded: false })\r\n    // should we update the server?\r\n    // we will think about it!\r\n    // how often should it call the update?\r\n  }\r\n\r\n  // Load the text fields after the questionnaire and questionnaire responses are loaded.\r\n  render() {\r\n    // questionnaire response object\r\n\r\n    if (this.state.loaded) {\r\n      return (\r\n        <Stack spacing={2}\r\n          sx={{\r\n            padding: '5% 3% 5% 3%'\r\n          }}>\r\n\r\n          <Typography variant='h2'>\r\n            Simple ISBAR Form\r\n          </Typography>\r\n          <Grid>\r\n            <FormControlLabel\r\n              value=\"ISOBAR\"\r\n              control={<Switch />}\r\n              label=\"ISOBAR\"\r\n              labelPlacement=\"start\"\r\n              onChange={(event) => this.setState({isIsobar: event.target.checked})}\r\n            >\r\n            </FormControlLabel>\r\n            <FHIRAutocomplete\r\n            resourceName=\"Practitioner\"\r\n            query={[]}\r\n            >\r\n\r\n            </FHIRAutocomplete>\r\n          </Grid>\r\n          <SimpleTextArea\r\n            initialValue={this.getFieldValue(0)}\r\n            placeholder=\"Introduction\"\r\n            visible={true}\r\n            updateField={(value) => this.updateFieldValue(value, 0)}\r\n          />\r\n          <SimpleTextArea\r\n            initialValue={this.getFieldValue(1)}\r\n            placeholder=\"Situation\"\r\n            visible={true}\r\n            updateField={(value) => this.updateFieldValue(value, 1)}\r\n          />\r\n          <SimpleTextArea\r\n            initialValue={this.getFieldValue(2)}\r\n            placeholder=\"Observation\"\r\n            visible={this.state.isIsobar}\r\n            updateField={(value) => this.updateFieldValue(value, 2)}\r\n          />\r\n          <SimpleTextArea\r\n            initialValue={this.getFieldValue(3)}\r\n            placeholder=\"Background\"\r\n            visible={true}\r\n            updateField={(value) => this.updateFieldValue(value, 3)}\r\n          />\r\n          <SimpleTextArea\r\n            initialValue={this.getFieldValue(4)}\r\n            placeholder=\"Assessment\"\r\n            visible={true}\r\n            updateField={(value) => this.updateFieldValue(value, 4)}\r\n          />\r\n          <SimpleTextArea\r\n            initialValue={this.getFieldValue(5)}\r\n            placeholder=\"Recommendation\"\r\n            visible={true}\r\n            updateField={(value) => this.updateFieldValue(value, 5)}\r\n          />\r\n\r\n          <button className=\"isbar-save\">\r\n            <PDFDownloadLink\r\n              document={\r\n                <SimplePDF content={this.state.content} />\r\n              }\r\n              fileName=\"isbar.pdf\"\r\n            >\r\n              {({ blob, url, loading, error }) =>\r\n                loading ? \"Preparing\" : \"Print\"\r\n              }\r\n            </PDFDownloadLink>\r\n          </button>\r\n\r\n        </Stack >\r\n\r\n      )\r\n    } else {\r\n      return (\r\n\r\n        <div className=\"loading-container\">\r\n          Creating new form..\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n// function that returns a new response\r\n// sourceID: ID of practitioner writing this form\r\n// it assumes the target is not defined, target practitioner will be included later.\r\nfunction newQuestionnaireResponse(questionnaireID, patientID, sourceID) {\r\n  // questionnaire response resource\r\n  //const date = new Date()\r\n  // const lastModified = new Date().toJSON()\r\n  // console.log(lastModified)\r\n\r\n  var qResponse = {\r\n    resourceType: \"QuestionnaireResponse\",\r\n    text: { name: \"isbar handover form\" },\r\n    // maybe later when we sort out the thingy\r\n    // Reference the questionnaire\r\n    // date this form was last modified\r\n    // authored: lastModified,\r\n    questionnaire: \"Questionnaire/\" + questionnaireID,\r\n    status: \"in-progress\",\r\n    subject: {\r\n      reference: \"Patient/\" + patientID\r\n    },\r\n    author: {\r\n      // refer to current practitioner\r\n      reference: \"Practitioner/\" + sourceID,\r\n    },\r\n    // extension not used because resolving reference requires extra effort. \r\n    // Instead, author section is used.\r\n    // extension: [{\r\n    //   url:\"http://hl7.org/fhir/StructureDefinition/questionnaireresponse-reviewer\",\r\n    //   valueReference:{\r\n    //     reference: \"Practitioner/\" + targetID\r\n    //   }\r\n    // }],\r\n    item: [\r\n      {\r\n        linkId: \"1\",\r\n        text: \"I:Identify\",\r\n      },\r\n      {\r\n        linkId: \"2\",\r\n        text: \"S:Situation\",\r\n      },\r\n      {\r\n        linkId: \"3\",\r\n        text: \"O:Observation\",\r\n      },\r\n      {\r\n        linkId: \"4\",\r\n        text: \"B:Background\",\r\n      },\r\n      {\r\n        linkId: \"5\",\r\n        text: \"A:Assessment\",\r\n      },\r\n      {\r\n        linkId: \"6\",\r\n        text: \"R:Recommendation\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  return qResponse;\r\n}","import React from \"react\";\r\n\r\nexport class Assessment extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render(){\r\n        return(\r\n            <div>Assessment</div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport class Background extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render(){\r\n        return(\r\n            <div>Background</div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport class Introduction extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render(){\r\n        return(\r\n            <div>Introduction is changed</div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\n\r\nexport class Recommendation extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    render() {\r\n        return (\r\n            <div class=\"container  mx-auto px-10 sm:px-8 max-w-7xl py-10\">\r\n                <sl-form>\r\n                    <sl-textarea rows={4}>\r\n                    </sl-textarea>\r\n                </sl-form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { IsbarClientContext } from \"../IsbarFhirClient\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Box from \"@mui/material/Box\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select from \"@mui/material/Select\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\n\r\nexport function AirwaySelect() {\r\n  const [options, setAirway] = React.useState(\"\");\r\n\r\n  const handleChange = (event) => {\r\n    setAirway(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ minWidth: 120 }}>\r\n      <FormControl fullWidth>\r\n        <InputLabel id=\"airwaySelect\">Airway</InputLabel>\r\n        <Select\r\n          labelId=\"Airway\"\r\n          id=\"airwaySelect\"\r\n          value={options}\r\n          label=\"Options\"\r\n          onChange={handleChange}\r\n        >\r\n          <MenuItem value={10}>Patent</MenuItem>\r\n          <MenuItem value={20}>Compromised</MenuItem>\r\n          <MenuItem value={30}>Ventilated</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport class Situation extends React.Component {\r\n  static contextType = IsbarClientContext;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // used true if data is loaded\r\n      loaded: false,\r\n      error: null,\r\n      // true if questionnaireResponse exists\r\n      responseExist: false,\r\n      patient: null,\r\n      // questionnaire object that will be stored or created\r\n      questionnaire: null,\r\n      // questionnaire response object\r\n      questionnaireResponse: null,\r\n      // turns true if it's isobar\r\n      isIsobar: false,\r\n      // indicates saved state\r\n      saveState: \"edited\",\r\n      // type of current form\r\n      formState: \"ISOBAR\",\r\n      // would be good if we have a array of question-answer pair.\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // load client from the client context\r\n    const client = this.context.client;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container  mx-auto px-10 sm:px-8 max-w-7xl py-10\">\r\n        <h1>Situation</h1>\r\n        <h3>Patient Status</h3>\r\n        <TextField fullWidth multiline placeholder=\"Patient Status\" />\r\n\r\n        <h3>Principle Diagnosis</h3>\r\n        <TextField fullWidth multiline placeholder=\"Principle Diagnosis\" />\r\n\r\n        <h3>Other Diagnosis/problems</h3>\r\n        <TextField fullWidth multiline placeholder=\"Other Diagnosis/problems\" />\r\n\r\n        <h3>Reason For transfer</h3>\r\n        <TextField fullWidth multiline placeholder=\"Reason For transfer\" />\r\n\r\n        <h3>Observations</h3>\r\n        <AirwaySelect />\r\n      </div>\r\n    );\r\n  }\r\n}","import React from \"react\";\r\nimport { Assessment } from \"./Assessment\";\r\nimport { Background } from \"./Background\";\r\nimport { Introduction } from \"./Introduction\";\r\nimport { Recommendation } from \"./Recommendation\";\r\nimport { Situation } from \"./Situation\";\r\n\r\nexport class IsbarComplexApp extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app-complex\">\r\n                <div className=\"container\">\r\n\r\n                    <h2 className=\"section-title\">Introduction</h2>\r\n                    <Introduction />\r\n                    <h2 className=\"section-title\">Situation</h2>\r\n                    <Situation />\r\n                    <h2 className=\"section-title\">Background</h2>\r\n                    <Background />\r\n                    <h2 className=\"section-title\">Assessment</h2>\r\n                    <Assessment />\r\n                    <h2 className=\"section-title\">Recommendation</h2>\r\n                    <Recommendation />\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Assessment } from \"./Assessment\";\r\nimport { Background } from \"./Background\";\r\nimport { Introduction } from \"./Introduction\";\r\nimport { Recommendation } from \"./Recommendation\";\r\nimport { Situation } from \"./Situation\";\r\n\r\nexport class IsbarContentField extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    render() {\r\n\r\n        switch (this.props.current) {\r\n            case \"I\":\r\n                return <Introduction />\r\n            case \"S\":\r\n                return <Situation />\r\n            case \"B\":\r\n                return <Background />\r\n            case \"A\":\r\n                return <Assessment />\r\n            case \"R\":\r\n                return <Recommendation />\r\n            default: \r\n                // fail safe\r\n                return <Introduction />\r\n\r\n\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { IsbarContentField } from \"./IsbarContentField\";\r\nimport { IsbarClientContext } from \"../IsbarFhirClient\";\r\nimport { client } from \"fhirclient\";\r\n\r\nexport class IsbarComplexDevelopment extends React.Component {\r\n    \r\n    // client context\r\n    static contextType = IsbarClientContext;\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.state = {\r\n            // state for the app display\r\n            current: \"I\",\r\n            loaded: false,\r\n            carePlan: null\r\n            // initialise careplan resource?\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        \r\n        const client = this.context.client;\r\n        // search for the careplan related to this patient\r\n        this.LoadCarePlan()\r\n        .then((res) => {\r\n            console.log(res)\r\n            this.setState({loaded: true})\r\n        })\r\n        // load the careplan\r\n    }\r\n\r\n    LoadCarePlan(){\r\n        return this.context.client.request(\"CarePlan?patient=\" + this.context.client.patient.id)\r\n        .then( res => {\r\n            // filter careplan\r\n\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.loaded){\r\n\r\n            return (\r\n            \r\n                <div className=\"app-complex\">\r\n                    <div className=\"app-content\">\r\n                        <IsbarContentField current={this.state.current} />\r\n                    </div>\r\n    \r\n                    <div className=\"footer\">\r\n                        <div className=\"arrow\">&larr;</div>\r\n                        <button className=\"nav-button\" onClick={() => this.setState({ current: \"I\" })}>I</button>\r\n                        <button className=\"nav-button\" onClick={() => this.setState({ current: \"S\" })}>S</button>\r\n                        <button className=\"nav-button\" onClick={() => this.setState({ current: \"B\" })}>B</button>\r\n                        <button className=\"nav-button\" onClick={() => this.setState({ current: \"A\" })}>A</button>\r\n                        <button className=\"nav-button\" onClick={() => this.setState({ current: \"R\" })}>R</button>\r\n                        <div className=\"arrow\">&rarr;</div>\r\n                    </div>\r\n    \r\n                </div>\r\n                \r\n            )\r\n        } else{\r\n            return(\r\n            <div>\r\n                Loading complex isbar form...\r\n            </div>)\r\n        }\r\n    }\r\n}\r\n","\r\n// get the simplified verison (first prefix, given and family name)\r\n// of the humanName fhir resource\r\nexport function getSimpleName(name){\r\n    if(!name.prefix[0]){\r\n        return name.given[0] + \" \" + name.family\r\n    }\r\n    return name.prefix[0] + \" \" + name.given[0] + \" \" + name.family\r\n}\r\n\r\n// takes in the time string that can be interpreted by date of js \r\n// returns time in format of YYYY-MM-DD HH:MM\r\nexport function getDateTimeString(time){\r\n    const date = new Date(time)\r\n    return date.getFullYear() + \"-\"\r\n        + date.getMonth() + \"-\"\r\n        + date.getDate() + \" \"\r\n        + date.getHours() + \":\"\r\n        + date.getMinutes()\r\n}","import React from \"react\";\r\nimport { TableBody, TableContainer, Table, TableHead, TableCell, TableRow, Paper } from '@mui/material';\r\nimport { DataGrid } from '@mui/x-data-grid'\r\nimport { getSimpleName, getDateTimeString } from \"./common/DisplayHelper\";\r\nimport { IsbarClientContext } from \"./IsbarFhirClient\";\r\nimport { Edit } from \"@mui/icons-material\";\r\n\r\n// this displays the list of previous simple isbar entries\r\n// takes in the bundle from response\r\n// displays previous entries in data table of mui\r\nexport class SimpleHistory extends React.Component {\r\n\r\n    static contextType = IsbarClientContext;\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            fields: [\r\n                {\r\n                    field: 'lastUpdated',\r\n                    headerName: 'Last Updated',\r\n                    description: \"Time last updated\",\r\n                    flex: 2\r\n                },\r\n                {\r\n                    field: 'id',\r\n                    headerName: 'ID',\r\n                    description: \"Form ID\",\r\n                    flex: 2\r\n                },\r\n                {\r\n                    field: 'author',\r\n                    headerName: 'Author',\r\n                    description: \"Author of the form\",\r\n                    flex: 3\r\n                },\r\n                {\r\n                    field: 'recipient',\r\n                    headerName: 'Recipient',\r\n                    description: \"Receiving party of the form\",\r\n                    flex: 3\r\n                },\r\n                {\r\n                    field: 'action',\r\n                    headerName: 'Action',\r\n                    description: \"Actions allowed on the form\",\r\n                    cellClassName: 'simple-table--cell',\r\n                    align: 'center',\r\n                    headerAlign: 'center',\r\n                    width: 100\r\n                },\r\n            ],\r\n            entries: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // load all the data from prop\r\n        console.log(\"history\")\r\n        console.log(this.props.data)\r\n        if (this.props.data) {\r\n            this.updateTable()\r\n        }\r\n        else {\r\n            console.error(\"No data given to history!! did the request fail?\")\r\n        }\r\n    }\r\n\r\n    // manually resolve the recipient..\r\n    updateTable() {\r\n        const newContent = []\r\n        // console.log(this.props.data)\r\n        if (this.props.data.total != 0) {\r\n\r\n            this.props.data.entry.forEach((element) => {\r\n                // element is each resource in the bundle\r\n                // console.log(element)\r\n                const resource = element.resource\r\n                // this.context.client.delete(\"QuestionnaireResponse/\"+resource.id)})}\r\n\r\n                // default content for the fields.\r\n                // Also displayed while resolving promises\r\n                const entry = {\r\n                    lastUpdated: 'Loading',\r\n                    id: 'Loading',\r\n                    author: 'Loading',\r\n                    recipient: 'Loading',\r\n                    action: null\r\n                }\r\n                // set new content??\r\n                if (resource.meta.hasOwnProperty('lastUpdated')) {\r\n                    entry.lastUpdated = getDateTimeString(resource.meta.lastUpdated)\r\n                }\r\n                if (resource.hasOwnProperty('id')) {\r\n                    entry.id = resource.id\r\n                }\r\n                if (resource.hasOwnProperty('author')) {\r\n                    entry.author = getSimpleName(resource.author.name[0])\r\n                }\r\n                entry.action = \"EDIT\"\r\n                newContent.push(entry)\r\n            });\r\n\r\n            // resolve the recipients of each.\r\n            // This function was positioned after initialisation of array to enable access\r\n            this.props.data.entry.forEach((element, index) => {\r\n                const resource = element.resource\r\n                if (resource.hasOwnProperty('extension')) {\r\n                    this.context.client.request(resource.extension[0].valueReference.reference)\r\n                        .then((res) => {\r\n                            console.log(newContent[index])\r\n                            newContent[index].recipient = getSimpleName(res.name[0])\r\n                            // force component update\r\n                            this.forceUpdate()\r\n                        })\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            console.log(\"no existing entry\")\r\n        }\r\n        this.setState({ entries: newContent })\r\n            \r\n    }\r\n\r\n    handleCellClick(cellParam) {\r\n        // handle cell click\r\n        if (cellParam.colDef.field === \"action\") {\r\n            // edit button is pressed. cell id is the form id\r\n            this.props.editForm(cellParam.id)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.state.entries)\r\n        if (this.state.entries != null) {\r\n\r\n            return (\r\n                <div style={{ height: 400, width: '100%' }}>\r\n\r\n                    <DataGrid\r\n                        rows={this.state.entries}\r\n                        columns={this.state.fields}\r\n                        pageSize={5}\r\n                        rowsPerPageOptions={[5]}\r\n                        disableColumnMenu={true}\r\n                        disableSelectionOnClick={true}\r\n                        onCellClick={(param) => {\r\n                            if (param.colDef.field === \"action\") {\r\n                                this.props.editForm(param.id)\r\n                            }\r\n                        }}\r\n                    />\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    Loading data..\r\n                </div>\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n","// Main class for the main screen. Contains everything.\r\nimport React from \"react\";\r\nimport { IsbarClientProvider } from \"./IsbarFhirClient\";\r\nimport { IsbarSimpleApp } from \"./app-simple/IsbarSimpleApp\";\r\nimport { IsbarComplexApp } from \"./app-complex/IsbarComplexApp\";\r\nimport { IsbarComplexDevelopment } from \"./app-complex/IsbarComplexDevelopment\";\r\nimport { IsbarClientContext } from \"./IsbarFhirClient\";\r\nimport { Stack, Box, Container, Accordion, AccordionSummary, Typography, Button, AccordionDetails } from '@mui/material'\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport { SimpleHistory } from \"./SimpleHistory\";\r\n\r\nexport default class Home extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <IsbarClientProvider>\r\n                <AppController />\r\n            </IsbarClientProvider>\r\n        )\r\n    }\r\n}\r\n\r\n// this component loads and displays the questionnaireResponse\r\nclass AppController extends React.Component {\r\n\r\n    // include client \r\n    static contextType = IsbarClientContext;\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            loaded: false,\r\n            isMenu: true,\r\n            isSimple: true,\r\n            questionnaireID: null,\r\n            simpleResponses: null,\r\n            createNew: false,\r\n            // id of current simple form\r\n            simpleFormID: null\r\n        }\r\n        this.editSimpleForm = this.editSimpleForm.bind(this)\r\n    }\r\n    componentDidMount() {\r\n\r\n        // Load questionnaire and simple isbar forms for this patient\r\n        const loadSimple = this.loadQuestionnaireID()\r\n            // .then(() => this.createSimpleIsbar())\r\n            .then((res) => this.loadSimpleIsbars(res))\r\n            .then(() => this.setState({ loaded: true }))\r\n        // this.context.client.request(\"Practitioner/e443ac58-8ece-4385-8d55-775c1b8f3a37\").then(console.log)\r\n        // wait till all promises resolved\r\n        Promise.all([loadSimple]).then(() => console.log(\"all loaded\"))\r\n    }\r\n\r\n    backToMenu() {\r\n\r\n        // change the statte to come back to menu\r\n        this.setState({ isMenu: true })\r\n    }\r\n\r\n    // Returns a promise that loads questionnaire ID using questionnaire template\r\n    // updates the state for questionnaire id\r\n    // the promise resolves to questionnaire id\r\n    loadQuestionnaireID() {\r\n\r\n        // make server calls \r\n        return this.context.client.request(\"Questionnaire?name=\" + isbarQuestionnaire.name)\r\n            .then((response) => {\r\n\r\n                if (response.total === 0) {\r\n                    // there are no questionnaire object - create one\r\n                    return this.context.client.create(isbarQuestionnaire);\r\n                } else {\r\n                    // return the existing questionnaire to be saved\r\n                    return response.entry[0].resource;\r\n                }\r\n            }).then((result) => {\r\n                // console.log(result.id)\r\n                // save the questionnaire ID in current component state\r\n                this.setState({ questionnaireID: result.id })\r\n                // return the questionnaire id. This allows response searching without\r\n                // having to wait for setState to be executed\r\n                return result.id\r\n            }).catch(console.error)\r\n    }\r\n\r\n    // Returns a promise for loading simple isbar forms given questionnaire id.\r\n    // The promise resolves to the bundle returned from the server\r\n    loadSimpleIsbars(questionnaireID) {\r\n\r\n        return this.context.client.request(\r\n            // currently, retrieves all responses about this patient\r\n            \"QuestionnaireResponse?questionnaire=\" + questionnaireID\r\n            + \"&patient=Patient/\" + this.context.client.patient.id,\r\n            // resolves references connected to questionnaire\r\n            // this was not used because it caused corruption, and the data had to be loaded again.\r\n            { resolveReferences: [\"author\"] }\r\n        ).then((result) => {\r\n            // console.log(result)\r\n            // console.log(questionnaireID)\r\n            this.setState({ simpleResponses: result })\r\n            // console.log(result)\r\n            return result\r\n        }).catch(console.error)\r\n    }\r\n\r\n    // opens existing form to edit. id is the questionnaireResponse id.\r\n    editSimpleForm(id){\r\n        // the simple form should be passed as a prop to child object?\r\n        const response = this.state.simpleResponses.entry.filter((element) => element.resource.id === id)\r\n        console.log(response)\r\n        console.log(response[0].resource.id)\r\n        // search the server for questionnaireResponse with same id\r\n        // The resource is retrieved again rather than being set from the bundle\r\n        // because bundle contains resolved references, it results in corruption\r\n        this.setState({simpleFormID: response[0].resource.id, isMenu: false, isSimple: true, createNew: false})\r\n    }\r\n\r\n    // What a mess! requires cleaning..\r\n    render() {\r\n\r\n        if (this.state.loaded && this.state.isMenu) {\r\n            return (\r\n                <div>\r\n                    <Box sx={{\r\n                        padding: '3%'\r\n                    }}>\r\n                        {/* Heading needs fixing */}\r\n                        <Typography sx={{\r\n                            width: '100%',\r\n                            textAlign: 'center',\r\n                            fontSize: '30px'\r\n                        }}>\r\n                            ISBAR Handover Form\r\n                        </Typography>\r\n\r\n                        {/* Stack requires positioning */}\r\n                        <Stack spacing={2}\r\n                            sx={{\r\n\r\n                            }}\r\n                        >\r\n                            <Accordion defaultExpanded={false}>\r\n                                <AccordionSummary\r\n                                    expandIcon={<ExpandMoreIcon />}\r\n                                    aria-controls=\"panel1bh-content\"\r\n                                    id=\"panel1bh-header\"\r\n                                >\r\n                                    <Typography sx={{ width: '70%', flexShrink: 0 }}>\r\n                                        Simple ISBAR handover forms\r\n                                    </Typography>\r\n                                    <Button\r\n                                        onClick={() => this.setState({ createNew: true, isMenu: false, isSimple: true })}\r\n                                    >\r\n                                        Create new\r\n                                    </Button>\r\n                                </AccordionSummary>\r\n                                <AccordionDetails>\r\n                                    <SimpleHistory \r\n                                    data={this.state.simpleResponses} \r\n                                    editForm={(id) => this.editSimpleForm(id)}\r\n                                    />\r\n                                </AccordionDetails>\r\n                            </Accordion>\r\n                        </Stack>\r\n                    </Box>\r\n\r\n                    <button className=\"main-menu-button\" onClick={() => this.setState({ isSimple: false, isMenu: false })}>\r\n                        Complex ISBAR\r\n                    </button>\r\n                </div>\r\n            )\r\n        } else if (this.state.loaded && this.state.isSimple) {\r\n\r\n            return (\r\n                <IsbarSimpleApp\r\n                    goBack={this.backToMenu.bind(this)}\r\n                    formID={this.state.simpleFormID} // this is the response object passed.\r\n                    create={this.state.createNew}\r\n                    questionnaireID={this.state.questionnaireID}\r\n                />\r\n            )\r\n        } else if (this.state.loaded && !this.state.isSimple) {\r\n            return (\r\n                // <IsbarComplexDevelopment />\r\n                <IsbarComplexApp />\r\n            )\r\n        } else {\r\n            return (<div>Loading</div>)\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nconst isbarQuestionnaire = {\r\n    \"resourceType\": \"Questionnaire\",\r\n    \"title\": \"questionnaireTitle\",\r\n    \"name\": \"isbar-simple\",\r\n    \"status\": \"active\",\r\n    // Introduction\r\n    \"item\": [{\r\n        \"linkid\": \"1\",\r\n        \"text\": \"I:Identify\",\r\n        \"type\": \"text\" // free text\r\n    },\r\n    // Situation\r\n    {\r\n        \"linkid\": \"2\",\r\n        \"text\": \"S:Situation\",\r\n        \"type\": \"text\" // free text\r\n    },\r\n    // Observation. Enable option is not included, because it could be handled by js.\r\n    {\r\n        \"linkid\": \"3\",\r\n        \"text\": \"O:Observation\",\r\n        \"type\": \"text\" // free text\r\n    },\r\n    // Background\r\n    {\r\n        \"linkid\": \"4\",\r\n        \"text\": \"B:Background\",\r\n        \"type\": \"text\" // free text\r\n    },\r\n    // assessment\r\n    {\r\n        \"linkid\": \"5\",\r\n        \"text\": \"A:Assessment\",\r\n        \"type\": \"text\" // free text\r\n    },\r\n    // Recommendation\r\n    {\r\n        \"linkid\": \"6\",\r\n        \"text\": \"R:Recommendation\",\r\n        \"type\": \"text\" // free text\r\n    }]\r\n}\r\n\r\n\r\n\r\n","/*\r\n  Application file for simple ISBAR app.\r\n  Classes can be separated later on.\r\n  the react-router-dom module had to be installed with:\r\n  npm install -S react-router-dom\r\n*/\r\nimport React from 'react';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport Launcher from './Launcher';\r\nimport Home from \"./Home\"\r\nimport './App.css';\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n The top application object. Responsible for:\r\n - Loading patient information\r\n - Loading questionnaire\r\n - Loading questionnaire response\r\n - Initiating the render of other components.\r\n */\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      // This runs the launcher first, which redirects to the main screen.\r\n      <BrowserRouter>\r\n        <Switch>\r\n          {/* The actual app */}\r\n          <Route path=\"/isbar-app\" component={Home} exact/>\r\n\r\n          {/* Launcher for smart app */}\r\n          <Route path=\"/\" component={Launcher} exact />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n// Render the ISBAR application in index.html\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}