{"ast":null,"code":"var _jsxFileName = \"/Users/myoungseokjeong/Desktop/Masters/COMP3820_digital_health_software_project/Code/COMP3820-ISBAR/isbar-simple-react/src/IsbarSimpleInputField.js\";\nimport React from \"react\";\nimport TextInputField from \"./TextInputField\";\nimport { IsbarClientContext } from \"./IsbarFhirClient\";\nimport { runInThisContext } from \"vm\"; // Class for the input field group.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ISBARSimpleInputField extends React.Component {\n  // the this.context.client is the client object!!!\n  constructor(props) {\n    super(props);\n    this.state = {\n      // used true if data is loaded\n      loaded: false,\n      error: null,\n      patient: null,\n      questionnaire: null,\n      // turns true if it's isobar\n      isIsobar: false // would be good if we have a array of question-answer pair.\n\n    };\n  }\n\n  componentDidMount() {\n    // questionnaire object\n    // Code is not inlcuded becaues it's not related to anything?\n    const questionnaireObject = {\n      \"resourceType\": \"Questionnaire\",\n      \"identifier\": \"questionnaireName\",\n      \"title\": \"questionnaireTitle\",\n      \"name\": \"ISBAR\",\n      \"status\": \"draft\",\n      // Introduction\n      \"item\": [{\n        \"linkid\": \"ISBARSimpleIdentify\",\n        \"text\": \"I:Identify\",\n        \"type\": \"text\" // free text\n\n      }, // Situation\n      {\n        \"linkid\": \"1\",\n        \"text\": \"S:Situation\",\n        \"type\": \"text\" // free text\n\n      }, // Observation. Enable option is not included, because it could be handled by js.\n      {\n        \"linkid\": \"2\",\n        \"text\": \"O:Observation\",\n        \"type\": \"text\" // free text\n\n      }, // Background\n      {\n        \"linkid\": \"3\",\n        \"text\": \"B:Background\",\n        \"type\": \"text\" // free text\n\n      }, // assessment\n      {\n        \"linkid\": \"4\",\n        \"text\": \"A:Assessment\",\n        \"type\": \"text\" // free text\n\n      }, // Recommendation\n      {\n        \"linkid\": \"5\",\n        \"text\": \"R:Recommendation\",\n        \"type\": \"text\" // free text\n\n      }]\n    };\n    const client = this.context.client;\n    this._loader = client.patient.read().then(patient => {\n      this.setState({\n        patient,\n        loaded: true,\n        error: null\n      });\n    }).catch(error => {\n      this.setState({\n        error,\n        loading: false\n      });\n    }); // the questionnaire\n\n    client.create(questionnaireObject).then(questionnaire => {\n      this.setState({\n        questionnaire\n      });\n      console.log(this.state.questionnaire);\n    }).catch(console.error);\n  } // function to change the form to isobar form.\n\n\n  changeToIsobar() {} // Load the text fields after the questionnaire and questionnaire responses are loaded.\n\n\n  render() {\n    //const client = this.context.client;\n    //this.state.client = this.context.client;\n    //this.state.value = this.context.client;\n    //var patient = this.state.value.patient;\n    if (this.state.loaded) {\n      if (this.state.isIsobar) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"isbar-input-fields\",\n          children: [/*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"I\",\n            heading: \"Heading\",\n            value: this.state.patient\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"S\",\n            heading: \"Heading\",\n            value: \"Loading....\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"O\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"B\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"A\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"R\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"isbar-input-fields\",\n          children: [/*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"I\",\n            heading: \"Heading\",\n            value: this.state.patient\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"S\",\n            heading: \"Heading\",\n            value: \"Loading....\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"B\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"A\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"R\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this);\n      }\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"isbar-loading\",\n        children: \"Loading the ISBAR form..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\nISBARSimpleInputField.contextType = IsbarClientContext;","map":{"version":3,"sources":["/Users/myoungseokjeong/Desktop/Masters/COMP3820_digital_health_software_project/Code/COMP3820-ISBAR/isbar-simple-react/src/IsbarSimpleInputField.js"],"names":["React","TextInputField","IsbarClientContext","runInThisContext","ISBARSimpleInputField","Component","constructor","props","state","loaded","error","patient","questionnaire","isIsobar","componentDidMount","questionnaireObject","client","context","_loader","read","then","setState","catch","loading","create","console","log","changeToIsobar","render","contextType"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport TextInputField from \"./TextInputField\";\nimport { IsbarClientContext } from \"./IsbarFhirClient\";\nimport { runInThisContext } from \"vm\";\n\n// Class for the input field group.\nexport class ISBARSimpleInputField extends React.Component {\n\n    // the this.context.client is the client object!!!\n    static contextType = IsbarClientContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // used true if data is loaded\n            loaded: false,\n            error: null,\n            patient: null,\n            questionnaire: null,\n            // turns true if it's isobar\n            isIsobar: false,\n            // would be good if we have a array of question-answer pair.\n        };\n    }\n\n    componentDidMount() {\n        // questionnaire object\n        // Code is not inlcuded becaues it's not related to anything?\n        const questionnaireObject = {\n            \"resourceType\": \"Questionnaire\",\n            \"identifier\": \"questionnaireName\",\n            \"title\": \"questionnaireTitle\",\n            \"name\": \"ISBAR\",\n            \"status\": \"draft\",\n            // Introduction\n            \"item\": [{\n                \"linkid\": \"ISBARSimpleIdentify\",\n                \"text\": \"I:Identify\",\n                \"type\": \"text\" // free text\n            },\n            // Situation\n            {\n                \"linkid\": \"1\",\n                \"text\": \"S:Situation\",\n                \"type\": \"text\" // free text\n            },\n            // Observation. Enable option is not included, because it could be handled by js.\n            {\n                \"linkid\": \"2\",\n                \"text\": \"O:Observation\",\n                \"type\": \"text\" // free text\n            },\n            // Background\n            {\n                \"linkid\": \"3\",\n                \"text\": \"B:Background\",\n                \"type\": \"text\" // free text\n            },\n            // assessment\n            {\n                \"linkid\": \"4\",\n                \"text\": \"A:Assessment\",\n                \"type\": \"text\" // free text\n            },\n            // Recommendation\n            {\n                \"linkid\": \"5\",\n                \"text\": \"R:Recommendation\",\n                \"type\": \"text\" // free text\n            }]\n        }\n        const client = this.context.client;\n        this._loader = client.patient\n            .read()\n            .then(patient => {\n                this.setState({ patient, loaded: true, error: null });\n            })\n            .catch(error => {\n                this.setState({ error, loading: false });\n            });\n        // the questionnaire\n        client.create(questionnaireObject).then(questionnaire => {\n            this.setState({ questionnaire })\n            console.log(this.state.questionnaire);\n        }).catch(console.error);\n    }\n\n    // function to change the form to isobar form.\n    changeToIsobar() {\n\n    }\n\n    // Load the text fields after the questionnaire and questionnaire responses are loaded.\n    render() {\n        //const client = this.context.client;\n        //this.state.client = this.context.client;\n        //this.state.value = this.context.client;\n        //var patient = this.state.value.patient;\n        if (this.state.loaded) {\n            if (this.state.isIsobar) {\n                return (\n                    <div className=\"isbar-input-fields\">\n                        <TextInputField label=\"I\" heading=\"Heading\" value={this.state.patient} />\n                        <TextInputField label=\"S\" heading=\"Heading\" value=\"Loading....\" />\n                        <TextInputField label=\"O\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"B\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"A\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"R\" heading=\"Heading\" value=\"Loading...\" />\n\n                    </div>\n                )\n            } else {\n                return (\n                    <div className=\"isbar-input-fields\">\n                        <TextInputField label=\"I\" heading=\"Heading\" value={this.state.patient} />\n                        <TextInputField label=\"S\" heading=\"Heading\" value=\"Loading....\" />\n                        <TextInputField label=\"B\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"A\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"R\" heading=\"Heading\" value=\"Loading...\" />\n                    </div>\n                )\n            }\n        } else {\n            return (\n                <div className=\"isbar-loading\">\n                    Loading the ISBAR form..\n                </div>\n            )\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}