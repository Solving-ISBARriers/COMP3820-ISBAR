{"ast":null,"code":"var _jsxFileName = \"/Users/myoungseokjeong/Desktop/Masters/COMP3820_digital_health_software_project/Code/COMP3820-ISBAR/isbar-simple-react/src/IsbarFhirClient.js\";\n// This is the file to deal with fhir client\n// Client context is created and updated.\nimport React from \"react\";\nimport { oauth2 as SMART } from \"fhirclient\"; // React client context so it is accessible in differernt parts of code.\n// by exporting, it should be accessible from various part of the code.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const IsbarClientContext = /*#__PURE__*/React.createContext({});\nexport class IsbarClientProvider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      client: null,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    // Wait until the SMART client is ready, then save the client object as its state.\n    SMART.ready().then(client => {\n      console.log(\"client ready\");\n      this.setState({\n        client\n      });\n    }, error => this.setState({\n      error\n    }));\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // When the client is not loaded, it displays authorizing message.\n      // Once the client is loaded, display the child components.\n      _jsxDEV(IsbarClientContext.Provider, {\n        value: this.state || {},\n        children: /*#__PURE__*/_jsxDEV(IsbarClientContext.Consumer, {\n          children: ({\n            client,\n            error\n          }) => {\n            console.log(\"Load success!\");\n            console.log(client); // any error that SMART.ready() may have been rejected with\n\n            if (error) {\n              return /*#__PURE__*/_jsxDEV(\"pre\", {\n                children: error.stack\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 36\n              }, this);\n            } // if client is already available render the subtree (patient and input in this case.)\n\n\n            if (client) {\n              return this.props.children;\n            } // client is undefined until SMART.ready() is fulfilled. show loading message\n\n\n            return \"Authorizing...\";\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this)\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/myoungseokjeong/Desktop/Masters/COMP3820_digital_health_software_project/Code/COMP3820-ISBAR/isbar-simple-react/src/IsbarFhirClient.js"],"names":["React","oauth2","SMART","IsbarClientContext","createContext","IsbarClientProvider","Component","constructor","props","state","client","error","componentDidMount","ready","then","console","log","setState","render","stack","children"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAM,IAAIC,KAAnB,QAAgC,YAAhC,C,CAEA;AACA;;;AACA,OAAO,MAAMC,kBAAkB,gBAAGH,KAAK,CAACI,aAAN,CAAoB,EAApB,CAA3B;AAEP,OAAO,MAAMC,mBAAN,SAAkCL,KAAK,CAACM,SAAxC,CAAkD;AACrDC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,IADC;AAETC,MAAAA,KAAK,EAAE;AAFE,KAAb;AAIH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB;AACAV,IAAAA,KAAK,CAACW,KAAN,GAAcC,IAAd,CACKJ,MAAD,IAAY;AACRK,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,WAAKC,QAAL,CAAc;AAAEP,QAAAA;AAAF,OAAd;AACH,KAJL,EAKKC,KAAD,IAAW,KAAKM,QAAL,CAAc;AAAEN,MAAAA;AAAF,KAAd,CALf;AAOH;;AACDO,EAAAA,MAAM,GAAG;AAEL;AAAA;AACI;AACA;AACA,cAAC,kBAAD,CAAoB,QAApB;AAA6B,QAAA,KAAK,EAAE,KAAKT,KAAL,IAAc,EAAlD;AAAA,+BACI,QAAC,kBAAD,CAAoB,QAApB;AAAA,oBACK,CAAC;AAAEC,YAAAA,MAAF;AAAUC,YAAAA;AAAV,WAAD,KAAuB;AACpBI,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ,EAFoB,CAGpB;;AACA,gBAAIC,KAAJ,EAAW;AACP,kCAAO;AAAA,0BAAMA,KAAK,CAACQ;AAAZ;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH,aANmB,CAQpB;;;AACA,gBAAIT,MAAJ,EAAY;AAER,qBAAO,KAAKF,KAAL,CAAWY,QAAlB;AACH,aAZmB,CAapB;;;AACA,mBAAO,gBAAP;AACH;AAhBL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAHJ;AAwBH;;AA5CoD","sourcesContent":["// This is the file to deal with fhir client\n// Client context is created and updated.\n\nimport React from \"react\";\nimport { oauth2 as SMART } from \"fhirclient\";\n\n// React client context so it is accessible in differernt parts of code.\n// by exporting, it should be accessible from various part of the code.\nexport const IsbarClientContext = React.createContext({});\n\nexport class IsbarClientProvider extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            client: null,\n            error: null\n        }\n    }\n    componentDidMount() {\n        // Wait until the SMART client is ready, then save the client object as its state.\n        SMART.ready().then(\n            (client) => {\n                console.log(\"client ready\");\n                this.setState({ client });\n            },\n            (error) => this.setState({ error })\n        );\n    }\n    render() {\n        \n        return (\n            // When the client is not loaded, it displays authorizing message.\n            // Once the client is loaded, display the child components.\n            <IsbarClientContext.Provider value={this.state || {}}>\n                <IsbarClientContext.Consumer>\n                    {({ client, error }) => {\n                        console.log(\"Load success!\");\n                        console.log(client);\n                        // any error that SMART.ready() may have been rejected with\n                        if (error) {\n                            return <pre>{error.stack}</pre>;\n                        }\n\n                        // if client is already available render the subtree (patient and input in this case.)\n                        if (client) {\n\n                            return this.props.children;\n                        }\n                        // client is undefined until SMART.ready() is fulfilled. show loading message\n                        return \"Authorizing...\";\n                    }}\n                </IsbarClientContext.Consumer>\n            </IsbarClientContext.Provider>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}