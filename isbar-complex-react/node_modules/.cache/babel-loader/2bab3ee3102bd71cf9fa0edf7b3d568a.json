{"ast":null,"code":"var _jsxFileName = \"/Users/myoungseokjeong/Desktop/Masters/COMP3820_digital_health_software_project/Code/COMP3820-ISBAR/isbar-simple-react/src/IsbarSimpleInputField.js\";\nimport React from \"react\";\nimport TextInputField from \"./TextInputField\";\nimport { IsbarClientContext } from \"./IsbarFhirClient\";\nimport { questionnaireObject } from \"./QuestionnaireTemplates\"; // Class for the input field group.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class IsbarSimpleInputField extends React.Component {\n  // the this.context.client is the client object!!!\n  constructor(props) {\n    super(props);\n    this.state = {\n      // used true if data is loaded\n      loaded: false,\n      error: null,\n      patient: null,\n      questionnaire: null,\n      questionnaireResponse: null,\n      // turns true if it's isobar\n      isIsobar: false // would be good if we have a array of question-answer pair.\n\n    };\n  }\n\n  componentDidMount() {\n    // questionnaire object\n    // Code is not inlcuded becaues it's not related to anything?\n    const client = this.context.client;\n    console.log(\"Component mounted\"); // These are number of async calls.\n\n    const loadPatient = client.patient.read().then(patient => {\n      this.setState({\n        patient,\n        loaded: false,\n        error: null\n      });\n      console.log(questionnaireObject.name); // Request the questionnaire responses by this patient\n      //return client.patient.request(\"QuestionnaireResponse\")\n    }); // This is the steam to retrieve the questionnaire object\n\n    const loadQuestionnaire = loadPatient.then(() => {\n      // WHy doesn't canonical url work?\n      //return client.request(questionnaireObject.url);\n      // tHis is searching based on name.. need something more robust.\n      return client.request(\"Questionnaire?name=\" + questionnaireObject.name);\n    }).then(response => {\n      console.log(\"Questionnaires:\");\n      console.log(response);\n\n      if (response.total == 0) {\n        // there are no questionnaire object - create one\n        return client.create(questionnaireObject);\n      } else {\n        // return the existing questionnaire to be saved\n        return response.entry[0].resource;\n      }\n    }).then(result => {\n      // save the created/found questionnaire object\n      this.setState({\n        questionnaire: result\n      });\n    }); // this is the stream for questionnaireResponse object\n\n    const loadResponse = loadPatient.then(() => {\n      return client.patient.request(\"QuestionnaireResponse\");\n    }).then(response => {\n      console.log(\"Questionnaireresponse bundle\");\n      console.log(response); // Find the response corresponding to isbar\n\n      if (response.total > 0) {\n        response.entry.forEach(element => {\n          if (element.resource.text.name == \"isbar-simple-response\") {\n            return element.resource;\n          }\n        });\n      } // create if there are no responses\n\n\n      console.log(\"No questionnaire response from this patient. Creating one..\");\n      return client.create(this.newQuestionnaireResponse());\n    }).then(result => {\n      console.log(\"Questionnaire response result\");\n      console.log(result); // save the response object.\n\n      this.setState({\n        questionnaireResponse: result\n      });\n    }); // wait for all promise to resolve. and catch error\n\n    Promise.all([loadQuestionnaire, loadResponse]).then(values => {\n      this.setState({\n        loaded: true,\n        error: null\n      });\n    }).catch(error => {\n      console.error(error);\n      this.setState({\n        error,\n        loaded: false\n      });\n    });\n  } // function to change the form to isobar form.\n\n\n  changeToIsobar() {} // function that creates questionnaire\n\n\n  createQuestionnaire() {\n    this.client.create(questionnaireObject).then(response => {\n      console.log(\"Created questionnaire\");\n      console.log(response);\n    }).catch(console.error);\n  } // create new empty questionnaire response resource with this patient.\n  // returns the questionnaire object made.\n\n\n  newQuestionnaireResponse() {\n    // questionnaire response resource\n    var qResponse = {\n      \"resourceType\": \"QuestionnaireResponse\",\n      \"text\": {\n        \"name\": \"isbar-simple-response\"\n      },\n      // maybe later when we sort out the thingy\n      // Reference the questionnaire\n      //\"questionnaire\": \"Questionnaire/\" + this.state.questionnaire.id,\n      \"status\": \"in-progress\",\n      \"authored\": \"2021-09-16T00:00:00+01:00\",\n      \"source\": {\n        // refer to current patient\n        \"reference\": \"Patient/\" + this.context.client.patient.id\n      },\n      \"item\": [{\n        \"linkId\": \"1\",\n        \"text\": \"I:Identify\",\n        \"answer\": [{\n          \"valueString\": \"\"\n        }]\n      }, {\n        \"linkId\": \"2\",\n        \"text\": \"S:Situation\",\n        \"answer\": [{\n          \"valueString\": \"\"\n        }]\n      }, {\n        \"linkId\": \"3\",\n        \"text\": \"O:Observation\",\n        \"answer\": [{\n          \"valueString\": \"\"\n        }]\n      }, {\n        \"linkId\": \"4\",\n        \"text\": \"B:Background\",\n        \"answer\": [{\n          \"valueString\": \"\"\n        }]\n      }, {\n        \"linkId\": \"5\",\n        \"text\": \"A:Assessment\",\n        \"answer\": [{\n          \"valueString\": \"\"\n        }]\n      }, {\n        \"linkId\": \"6\",\n        \"text\": \"R:Recommendation\",\n        \"answer\": [{\n          \"valueString\": \"\"\n        }]\n      }]\n    };\n    return qResponse;\n  } // this is the function for changing value\n  // changes answer string in the questionnaireresponse object with given index\n\n\n  handleChange(event, index) {\n    console.log(this);\n    const item = this.state.questionnaireResponse.item[index]; //item.answer[0].valueString = event.target.value\n\n    if (item.hasOwnProperty('answer')) {\n      item.answer[0].valueString = event.target.value;\n    } else {\n      item.answer = [{\n        \"valueString\": event.target.value\n      }];\n    }\n  } // Load the text fields after the questionnaire and questionnaire responses are loaded.\n\n\n  render() {\n    //const client = this.context.client;\n    //this.state.client = this.context.client;\n    //this.state.value = this.context.client;\n    //var patient = this.state.value.patient;\n    // questionnaire response object\n    if (this.state.loaded) {\n      console.log(\"loaded\");\n      console.log(this.state.questionnaire);\n      console.log(this.state.questionnaireResponse);\n\n      if (this.state.isIsobar) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"isbar-input-fields\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"isbar-input-fields\",\n          children: [/*#__PURE__*/_jsxDEV(TextInputField, {\n            index: \"0\",\n            item: this.state.questionnaireResponse.item[0],\n            callback: this.handleChange.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            index: \"1\",\n            item: this.state.questionnaireResponse.item[1],\n            callback: this.handleChange.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            index: \"3\",\n            item: this.state.questionnaireResponse.item[3],\n            callback: this.handleChange.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            index: \"4\",\n            item: this.state.questionnaireResponse.item[4],\n            callback: this.handleChange.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            index: \"5\",\n            item: this.state.questionnaireResponse.item[5],\n            callback: this.handleChange.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }, this);\n      }\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"isbar-loading\",\n        children: \"Loading the ISBAR form..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\nIsbarSimpleInputField.contextType = IsbarClientContext;","map":{"version":3,"sources":["/Users/myoungseokjeong/Desktop/Masters/COMP3820_digital_health_software_project/Code/COMP3820-ISBAR/isbar-simple-react/src/IsbarSimpleInputField.js"],"names":["React","TextInputField","IsbarClientContext","questionnaireObject","IsbarSimpleInputField","Component","constructor","props","state","loaded","error","patient","questionnaire","questionnaireResponse","isIsobar","componentDidMount","client","context","console","log","loadPatient","read","then","setState","name","loadQuestionnaire","request","response","total","create","entry","resource","result","loadResponse","forEach","element","text","newQuestionnaireResponse","Promise","all","values","catch","changeToIsobar","createQuestionnaire","qResponse","id","handleChange","event","index","item","hasOwnProperty","answer","valueString","target","value","render","bind","contextType"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport TextInputField from \"./TextInputField\";\nimport { IsbarClientContext } from \"./IsbarFhirClient\";\nimport { questionnaireObject } from \"./QuestionnaireTemplates\";\n\n// Class for the input field group.\nexport class IsbarSimpleInputField extends React.Component {\n\n    // the this.context.client is the client object!!!\n    static contextType = IsbarClientContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // used true if data is loaded\n            loaded: false,\n            error: null,\n            patient: null,\n            questionnaire: null,\n            questionnaireResponse: null,\n            // turns true if it's isobar\n            isIsobar: false,\n            // would be good if we have a array of question-answer pair.\n        };\n    }\n\n    componentDidMount() {\n        // questionnaire object\n        // Code is not inlcuded becaues it's not related to anything?\n\n        const client = this.context.client;\n        console.log(\"Component mounted\");\n        // These are number of async calls.\n        const loadPatient = client.patient\n            .read()\n            .then(patient => {\n                this.setState({ patient, loaded: false, error: null });\n                console.log(questionnaireObject.name);\n                // Request the questionnaire responses by this patient\n                //return client.patient.request(\"QuestionnaireResponse\")\n            });\n\n\n        // This is the steam to retrieve the questionnaire object\n        const loadQuestionnaire = loadPatient.then(() => {\n\n            // WHy doesn't canonical url work?\n            //return client.request(questionnaireObject.url);\n            // tHis is searching based on name.. need something more robust.\n            return client.request(\"Questionnaire?name=\" + questionnaireObject.name);\n        }).then(response => {\n\n            console.log(\"Questionnaires:\");\n            console.log(response);\n            if (response.total == 0) {\n                // there are no questionnaire object - create one\n                return client.create(questionnaireObject);\n            } else {\n                // return the existing questionnaire to be saved\n                return response.entry[0].resource;\n            }\n        }).then(result => {\n            // save the created/found questionnaire object\n            this.setState({ questionnaire: result });\n        });\n\n        // this is the stream for questionnaireResponse object\n        const loadResponse = loadPatient.then(() => {\n\n            return client.patient.request(\"QuestionnaireResponse\");\n        }).then(response => {\n\n            console.log(\"Questionnaireresponse bundle\");\n            console.log(response);\n            // Find the response corresponding to isbar\n            if (response.total > 0) {\n\n                response.entry.forEach(element => {\n                    if (element.resource.text.name == \"isbar-simple-response\") {\n\n                        return element.resource;\n                    }\n                });\n            }\n            // create if there are no responses\n            console.log(\"No questionnaire response from this patient. Creating one..\")\n            return client.create(this.newQuestionnaireResponse());\n        }).then(result => {\n\n            console.log(\"Questionnaire response result\");\n            console.log(result);\n            // save the response object.\n            this.setState({ questionnaireResponse: result });\n        });\n\n        // wait for all promise to resolve. and catch error\n        Promise.all([loadQuestionnaire, loadResponse]).then((values) => {\n\n            this.setState({ loaded: true, error: null });\n        }).catch(error => {\n\n            console.error(error);\n            this.setState({ error, loaded: false });\n        });\n    }\n\n    // function to change the form to isobar form.\n    changeToIsobar() {\n\n    }\n\n    // function that creates questionnaire\n    createQuestionnaire() {\n        this.client.create(questionnaireObject).then(response => {\n            console.log(\"Created questionnaire\");\n            console.log(response);\n        }).catch(console.error);\n    }\n\n    // create new empty questionnaire response resource with this patient.\n    // returns the questionnaire object made.\n    newQuestionnaireResponse() {\n\n        // questionnaire response resource\n        var qResponse = {\n            \"resourceType\": \"QuestionnaireResponse\",\n            \"text\": { \"name\": \"isbar-simple-response\" },\n            // maybe later when we sort out the thingy\n            // Reference the questionnaire\n            //\"questionnaire\": \"Questionnaire/\" + this.state.questionnaire.id,\n            \"status\": \"in-progress\",\n            \"authored\": \"2021-09-16T00:00:00+01:00\",\n            \"source\": {\n                // refer to current patient\n                \"reference\": \"Patient/\" + this.context.client.patient.id\n            },\n            \"item\": [\n                {\n                    \"linkId\": \"1\",\n                    \"text\": \"I:Identify\",\n                    \"answer\": [\n                        {\n                            \"valueString\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"linkId\": \"2\",\n                    \"text\": \"S:Situation\",\n                    \"answer\": [\n                        {\n                            \"valueString\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"linkId\": \"3\",\n                    \"text\": \"O:Observation\",\n                    \"answer\": [\n                        {\n                            \"valueString\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"linkId\": \"4\",\n                    \"text\": \"B:Background\",\n                    \"answer\": [\n                        {\n                            \"valueString\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"linkId\": \"5\",\n                    \"text\": \"A:Assessment\",\n                    \"answer\": [\n                        {\n                            \"valueString\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"linkId\": \"6\",\n                    \"text\": \"R:Recommendation\",\n                    \"answer\": [\n                        {\n                            \"valueString\": \"\"\n                        }\n                    ]\n                },\n            ]\n        }\n\n        return qResponse;\n    }\n\n    // this is the function for changing value\n    // changes answer string in the questionnaireresponse object with given index\n    handleChange(event, index) {\n        \n        \n        console.log(this)\n        const item = this.state.questionnaireResponse.item[index];\n        //item.answer[0].valueString = event.target.value\n\n        if(item.hasOwnProperty('answer')){\n            item.answer[0].valueString = event.target.value\n        } else{\n            item.answer = [{\n                \"valueString\": event.target.value\n            }]\n        }\n\n    }\n\n    // Load the text fields after the questionnaire and questionnaire responses are loaded.\n    render() {\n        //const client = this.context.client;\n        //this.state.client = this.context.client;\n        //this.state.value = this.context.client;\n        //var patient = this.state.value.patient;\n\n        // questionnaire response object\n\n        if (this.state.loaded) {\n            console.log(\"loaded\")\n            console.log(this.state.questionnaire)\n            console.log(this.state.questionnaireResponse)\n            if (this.state.isIsobar) {\n                return (\n                    <div className=\"isbar-input-fields\">\n                        {/* <TextInputField label=\"I\" heading=\"Heading\" value={this.state.questionnaireResponse} />\n                        <TextInputField label=\"S\" heading=\"Heading\" value=\"Loading....\" />\n                        <TextInputField label=\"O\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"B\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"A\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"R\" heading=\"Heading\" value=\"Loading...\" /> */}\n\n                    </div>\n                )\n            } else {\n                return (\n                    <div className=\"isbar-input-fields\">\n                        <TextInputField\n                            index=\"0\"\n                            item={this.state.questionnaireResponse.item[0]}\n                            callback={this.handleChange.bind(this)}\n                        />\n                        <TextInputField\n                            index=\"1\"\n                            item={this.state.questionnaireResponse.item[1]}\n                            callback={this.handleChange.bind(this)}\n                        />\n                        <TextInputField\n                            index=\"3\"\n                            item={this.state.questionnaireResponse.item[3]}\n                            callback={this.handleChange.bind(this)}\n                        />\n                        <TextInputField\n                            index=\"4\"\n                            item={this.state.questionnaireResponse.item[4]}\n                            callback={this.handleChange.bind(this)}\n                        />\n                        <TextInputField\n                            index=\"5\"\n                            item={this.state.questionnaireResponse.item[5]}\n                            callback={this.handleChange.bind(this)}\n                        />\n                    </div>\n                )\n            }\n        } else {\n            return (\n                <div className=\"isbar-loading\">\n                    Loading the ISBAR form..\n                </div>\n            )\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}