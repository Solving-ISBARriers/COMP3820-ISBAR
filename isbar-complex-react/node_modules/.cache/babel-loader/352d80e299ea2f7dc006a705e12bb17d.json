{"ast":null,"code":"var _jsxFileName = \"/Users/myoungseokjeong/Desktop/Masters/COMP3820_digital_health_software_project/Code/COMP3820-ISBAR/isbar-simple-react/src/IsbarSimpleInputField.js\";\nimport React from \"react\";\nimport TextInputField from \"./TextInputField\";\nimport { IsbarClientContext } from \"./IsbarFhirClient\";\nimport { questionnaireObject } from \"./QuestionnaireTemplates\"; // Class for the input field group.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class IsbarSimpleInputField extends React.Component {\n  // the this.context.client is the client object!!!\n  constructor(props) {\n    super(props);\n    this.state = {\n      // used true if data is loaded\n      loaded: false,\n      error: null,\n      patient: null,\n      questionnaire: null,\n      questionnaireResponse: null,\n      // turns true if it's isobar\n      isIsobar: false // would be good if we have a array of question-answer pair.\n\n    };\n  }\n\n  componentDidMount() {\n    // load client from the client context\n    const client = this.context.client; // Promise to \n\n    const loadPatient = client.patient.read().then(patient => this.setState({\n      patient: patient\n    })); // This is the steam to retrieve the questionnaire object\n\n    const loadQuestionnaire = loadPatient.then(() => {\n      // tHis is searching based on name.. need something more robust?\n      // but the url can't be returned\n      return client.request(\"Questionnaire?name=\" + questionnaireObject.name);\n    }).then(response => {\n      console.log(\"Questionnaires:\");\n      console.log(response);\n\n      if (response.total === 0) {\n        // there are no questionnaire object - create one\n        return client.create(questionnaireObject);\n      } else {\n        // return the existing questionnaire to be saved\n        return response.entry[0].resource;\n      }\n    }).then(result => {\n      // save the created/found questionnaire object\n      this.setState({\n        questionnaire: result\n      });\n    }); // this is the stream for questionnaireResponse object\n\n    const loadResponse = loadPatient.then(() => {\n      return client.request(\"QuestionnaireResponse?source=\" + \"Patient/\" + this.context.client.patient.id);\n    }).then(response => {\n      console.log(\"Questionnaire Responses:\");\n      console.log(response);\n      var qResponse; // Find the response corresponding to isbar\n\n      if (response.total > 0) {\n        if ( // this checks if our questionnaire exists\n        response.entry.some(element => {\n          qResponse = element.resource;\n          return this.checkExistingResponse(element.resource);\n        })) {\n          console.log(\"Selected Response\");\n          console.log(qResponse);\n          return qResponse;\n        } else {\n          return client.create(this.newQuestionnaireResponse());\n        }\n      } // create if there are no responses\n\n\n      console.log(\"No questionnaire response from this patient. Creating one..\");\n      return client.create(this.newQuestionnaireResponse());\n    }).then(result => {\n      console.log(\"Questionnaire response result\");\n      console.log(result); // save the response object.\n\n      this.setState({\n        questionnaireResponse: result\n      });\n    }); // wait for all promise to resolve. and catch error\n\n    Promise.all([loadQuestionnaire, loadResponse]).then(values => {\n      this.setState({\n        loaded: true,\n        error: null\n      });\n    }).catch(error => {\n      console.error(error);\n      this.setState({\n        error,\n        loaded: false\n      });\n    });\n  } // function to change the form to isobar form.\n\n\n  changeToIsobar() {} // function that creates questionnaire\n\n\n  createQuestionnaire() {\n    this.client.create(questionnaireObject).then(response => {\n      console.log(\"Created questionnaire\");\n      console.log(response);\n    }).catch(console.error);\n  } // check if the given resource is QuestionnaireResponse for isbar\n  // still need some check to see if it is actually for isbar\n\n\n  checkExistingResponse(resource) {\n    if (resource.source.reference === \"Patient/\" + this.context.client.patient.id) {\n      return true;\n    } else {\n      return false;\n    }\n  } // function to send update request\n\n\n  updateResponse() {\n    console.log(\"Updated response: \" + JSON.stringify(this.state.questionnaireResponse));\n    this.context.client.update(this.state.questionnaireResponse).then(console.log).catch(console.error);\n  } // create new empty questionnaire response resource with this patient.\n  // returns the questionnaire object made.\n\n\n  newQuestionnaireResponse() {\n    // questionnaire response resource\n    var qResponse = {\n      \"resourceType\": \"QuestionnaireResponse\",\n      \"text\": {\n        \"name\": \"isbar-simple-response\"\n      },\n      // maybe later when we sort out the thingy\n      // Reference the questionnaire\n      //\"questionnaire\": \"Questionnaire/\" + this.state.questionnaire.id,\n      \"status\": \"in-progress\",\n      \"authored\": \"2021-09-16T00:00:00+01:00\",\n      \"source\": {\n        // refer to current patient\n        \"reference\": \"Patient/\" + this.context.client.patient.id\n      },\n      \"item\": [{\n        \"linkId\": \"1\",\n        \"text\": \"I:Identify\",\n        \"answer\": [{\n          \"valueString\": \"\"\n        }]\n      }, {\n        \"linkId\": \"2\",\n        \"text\": \"S:Situation\",\n        \"answer\": [{\n          \"valueString\": \"\"\n        }]\n      }, {\n        \"linkId\": \"3\",\n        \"text\": \"O:Observation\",\n        \"answer\": [{\n          \"valueString\": \"\"\n        }]\n      }, {\n        \"linkId\": \"4\",\n        \"text\": \"B:Background\",\n        \"answer\": [{\n          \"valueString\": \"\"\n        }]\n      }, {\n        \"linkId\": \"5\",\n        \"text\": \"A:Assessment\",\n        \"answer\": [{\n          \"valueString\": \"\"\n        }]\n      }, {\n        \"linkId\": \"6\",\n        \"text\": \"R:Recommendation\",\n        \"answer\": [{\n          \"valueString\": \"\"\n        }]\n      }]\n    };\n    return qResponse;\n  } // this is the function for changing value\n  // changes answer string in the questionnaireresponse object with given index\n  // updates questionnaireresponse state\n\n\n  handleChange(event, index) {\n    var response = this.state.questionnaireResponse; //item.answer[0].valueString = event.target.value\n\n    if (response.item[index].hasOwnProperty('answer')) {\n      response.item[index].answer[0].valueString = event.target.value;\n    } else {\n      response.item[index].answer = [{\n        \"valueString\": event.target.value\n      }];\n    }\n\n    this.setState({\n      questionnaireResponse: response\n    });\n  } // Load the text fields after the questionnaire and questionnaire responses are loaded.\n\n\n  render() {\n    //const client = this.context.client;\n    //this.state.client = this.context.client;\n    //this.state.value = this.context.client;\n    //var patient = this.state.value.patient;\n    // questionnaire response object\n    if (this.state.loaded) {\n      if (this.state.isIsobar) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"isbar-input-fields\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(TextInputField, {\n            index: \"0\",\n            formID: \"introduction\",\n            label: \"I\",\n            placeholder: \"Introduction\",\n            item: this.state.questionnaireResponse.item[0],\n            handleChange: this.handleChange.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            index: \"1\",\n            formID: \"situation\",\n            label: \"S\",\n            placeholder: \"Situation\",\n            item: this.state.questionnaireResponse.item[1],\n            handleChange: this.handleChange.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            index: \"3\",\n            formID: \"background\",\n            label: \"B\",\n            placeholder: \"Background\",\n            item: this.state.questionnaireResponse.item[3],\n            handleChange: this.handleChange.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            index: \"4\",\n            formID: \"assessment\",\n            label: \"A\",\n            placeholder: \"Assessment\",\n            item: this.state.questionnaireResponse.item[4],\n            handleChange: this.handleChange.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            index: \"5\",\n            formID: \"recommendation\",\n            label: \"R\",\n            placeholder: \"Recommendation\",\n            item: this.state.questionnaireResponse.item[5],\n            handleChange: this.handleChange.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.updateResponse(),\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 21\n        }, this);\n      }\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"isbar-loading\",\n        children: \"Loading the ISBAR form..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\nIsbarSimpleInputField.contextType = IsbarClientContext;","map":{"version":3,"sources":["/Users/myoungseokjeong/Desktop/Masters/COMP3820_digital_health_software_project/Code/COMP3820-ISBAR/isbar-simple-react/src/IsbarSimpleInputField.js"],"names":["React","TextInputField","IsbarClientContext","questionnaireObject","IsbarSimpleInputField","Component","constructor","props","state","loaded","error","patient","questionnaire","questionnaireResponse","isIsobar","componentDidMount","client","context","loadPatient","read","then","setState","loadQuestionnaire","request","name","response","console","log","total","create","entry","resource","result","loadResponse","id","qResponse","some","element","checkExistingResponse","newQuestionnaireResponse","Promise","all","values","catch","changeToIsobar","createQuestionnaire","source","reference","updateResponse","JSON","stringify","update","handleChange","event","index","item","hasOwnProperty","answer","valueString","target","value","render","bind","contextType"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport TextInputField from \"./TextInputField\";\nimport { IsbarClientContext } from \"./IsbarFhirClient\";\nimport { questionnaireObject } from \"./QuestionnaireTemplates\";\n\n// Class for the input field group.\nexport class IsbarSimpleInputField extends React.Component {\n\n    // the this.context.client is the client object!!!\n    static contextType = IsbarClientContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // used true if data is loaded\n            loaded: false,\n            error: null,\n            patient: null,\n            questionnaire: null,\n            questionnaireResponse: null,\n            // turns true if it's isobar\n            isIsobar: false,\n            // would be good if we have a array of question-answer pair.\n        };\n    }\n\n    componentDidMount() {\n\n        // load client from the client context\n        const client = this.context.client;\n        \n        // Promise to \n        const loadPatient = client.patient.read().then(patient => this.setState({patient: patient}))\n\n        // This is the steam to retrieve the questionnaire object\n        const loadQuestionnaire = loadPatient.then(() => {\n\n            // tHis is searching based on name.. need something more robust?\n            // but the url can't be returned\n            return client.request(\"Questionnaire?name=\" + questionnaireObject.name);\n        }).then(response => {\n\n            console.log(\"Questionnaires:\");\n            console.log(response);\n            if (response.total === 0) {\n                // there are no questionnaire object - create one\n                return client.create(questionnaireObject);\n            } else {\n                // return the existing questionnaire to be saved\n                return response.entry[0].resource;\n            }\n        }).then(result => {\n            // save the created/found questionnaire object\n            this.setState({ questionnaire: result });\n        });\n\n        // this is the stream for questionnaireResponse object\n        const loadResponse = loadPatient.then(() => {\n\n            return client.request(\"QuestionnaireResponse?source=\"+\"Patient/\" + this.context.client.patient.id);\n        }).then(response => {\n\n            console.log(\"Questionnaire Responses:\");\n            console.log(response);\n            var qResponse\n            // Find the response corresponding to isbar\n            if (response.total > 0) {\n\n                if(\n                    // this checks if our questionnaire exists\n                    response.entry.some(element => {\n                        qResponse = element.resource;\n                        return this.checkExistingResponse(element.resource);\n                    })\n                ){\n                    console.log(\"Selected Response\")\n                    console.log(qResponse)\n                    return qResponse\n                } else{\n                    return client.create(this.newQuestionnaireResponse());\n                }\n            }\n            // create if there are no responses\n            console.log(\"No questionnaire response from this patient. Creating one..\")\n            return client.create(this.newQuestionnaireResponse());\n        }).then(result => {\n\n            console.log(\"Questionnaire response result\");\n            console.log(result);\n            // save the response object.\n            this.setState({ questionnaireResponse: result });\n        })\n\n        // wait for all promise to resolve. and catch error\n        Promise.all([loadQuestionnaire, loadResponse]).then((values) => {\n\n            this.setState({ loaded: true, error: null });\n        }).catch(error => {\n\n            console.error(error);\n            this.setState({ error, loaded: false });\n        });\n    }\n\n    // function to change the form to isobar form.\n    changeToIsobar() {\n\n    }\n\n    // function that creates questionnaire\n    createQuestionnaire() {\n        this.client.create(questionnaireObject).then(response => {\n            console.log(\"Created questionnaire\");\n            console.log(response);\n        }).catch(console.error);\n    }\n    \n    // check if the given resource is QuestionnaireResponse for isbar\n    // still need some check to see if it is actually for isbar\n    checkExistingResponse(resource){\n\n        if(resource.source.reference === \"Patient/\" + this.context.client.patient.id){\n            return true\n        }\n        else{\n            return false\n        }\n    }\n\n    // function to send update request\n    updateResponse(){\n        console.log(\"Updated response: \" + JSON.stringify(this.state.questionnaireResponse))\n        this.context.client.update(this.state.questionnaireResponse)\n        .then(console.log)\n        .catch(console.error)\n    }\n\n    // create new empty questionnaire response resource with this patient.\n    // returns the questionnaire object made.\n    newQuestionnaireResponse() {\n\n        // questionnaire response resource\n        var qResponse = {\n            \"resourceType\": \"QuestionnaireResponse\",\n            \"text\": { \"name\": \"isbar-simple-response\" },\n            // maybe later when we sort out the thingy\n            // Reference the questionnaire\n            //\"questionnaire\": \"Questionnaire/\" + this.state.questionnaire.id,\n            \"status\": \"in-progress\",\n            \"authored\": \"2021-09-16T00:00:00+01:00\",\n            \"source\": {\n                // refer to current patient\n                \"reference\": \"Patient/\" + this.context.client.patient.id\n            },\n            \"item\": [\n                {\n                    \"linkId\": \"1\",\n                    \"text\": \"I:Identify\",\n                    \"answer\": [\n                        {\n                            \"valueString\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"linkId\": \"2\",\n                    \"text\": \"S:Situation\",\n                    \"answer\": [\n                        {\n                            \"valueString\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"linkId\": \"3\",\n                    \"text\": \"O:Observation\",\n                    \"answer\": [\n                        {\n                            \"valueString\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"linkId\": \"4\",\n                    \"text\": \"B:Background\",\n                    \"answer\": [\n                        {\n                            \"valueString\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"linkId\": \"5\",\n                    \"text\": \"A:Assessment\",\n                    \"answer\": [\n                        {\n                            \"valueString\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"linkId\": \"6\",\n                    \"text\": \"R:Recommendation\",\n                    \"answer\": [\n                        {\n                            \"valueString\": \"\"\n                        }\n                    ]\n                },\n            ]\n        }\n\n        return qResponse;\n    }\n\n    // this is the function for changing value\n    // changes answer string in the questionnaireresponse object with given index\n    // updates questionnaireresponse state\n    handleChange(event, index) {\n        \n        \n        var response = this.state.questionnaireResponse;\n        \n        \n        //item.answer[0].valueString = event.target.value\n\n        if(response.item[index].hasOwnProperty('answer')){\n            response.item[index].answer[0].valueString = event.target.value\n        } else{\n            response.item[index].answer = [{\n                \"valueString\": event.target.value\n            }]\n        }\n        \n        this.setState({questionnaireResponse: response})\n        \n\n    }\n\n    // Load the text fields after the questionnaire and questionnaire responses are loaded.\n    render() {\n        //const client = this.context.client;\n        //this.state.client = this.context.client;\n        //this.state.value = this.context.client;\n        //var patient = this.state.value.patient;\n\n        // questionnaire response object\n\n        if (this.state.loaded) {\n            if (this.state.isIsobar) {\n                return (\n                    <div className=\"isbar-input-fields\">\n                        {/* <TextInputField label=\"I\" heading=\"Heading\" value={this.state.questionnaireResponse} />\n                        <TextInputField label=\"S\" heading=\"Heading\" value=\"Loading....\" />\n                        <TextInputField label=\"O\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"B\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"A\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"R\" heading=\"Heading\" value=\"Loading...\" /> */}\n\n                    </div>\n                )\n            } else {\n                return (\n                    <div className=\"container\">\n                        \n                        <TextInputField\n                            index=\"0\"\n                            formID=\"introduction\"\n                            label=\"I\"\n                            placeholder=\"Introduction\"\n                            item={this.state.questionnaireResponse.item[0]}\n                            handleChange={this.handleChange.bind(this)}\n                        />\n                        <TextInputField\n                            index=\"1\"\n                            formID=\"situation\"\n                            label=\"S\"\n                            placeholder=\"Situation\"\n                            item={this.state.questionnaireResponse.item[1]}\n                            handleChange={this.handleChange.bind(this)}\n                        />\n                        <TextInputField\n                            index=\"3\"\n                            formID=\"background\"\n                            label=\"B\"\n                            placeholder=\"Background\"\n                            item={this.state.questionnaireResponse.item[3]}\n                            handleChange={this.handleChange.bind(this)}\n                        />\n                        <TextInputField\n                            index=\"4\"\n                            formID=\"assessment\"\n                            label=\"A\"\n                            placeholder=\"Assessment\"\n                            item={this.state.questionnaireResponse.item[4]}\n                            handleChange={this.handleChange.bind(this)}\n                        />\n                        <TextInputField\n                            index=\"5\"\n                            formID=\"recommendation\"\n                            label=\"R\"\n                            placeholder=\"Recommendation\"\n                            item={this.state.questionnaireResponse.item[5]}\n                            handleChange={this.handleChange.bind(this)}\n                        />\n                        <button onClick={() => this.updateResponse()}>\n                            Save\n                        </button>\n                        \n                    </div>\n                )\n            }\n        } else {\n            return (\n                <div className=\"isbar-loading\">\n                    Loading the ISBAR form..\n                </div>\n            )\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}