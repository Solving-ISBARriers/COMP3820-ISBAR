{"ast":null,"code":"var _jsxFileName = \"/Users/myoungseokjeong/Desktop/Masters/COMP3820_digital_health_software_project/Code/COMP3820-ISBAR/isbar-simple-react/src/IsbarSimpleInputField.js\";\nimport React from \"react\";\nimport TextInputField from \"./TextInputField\";\nimport { IsbarClientContext } from \"./IsbarFhirClient\";\nimport { questionnaireObject } from \"./QuestionnaireTemplates\"; // Class for the input field group.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class IsbarSimpleInputField extends React.Component {\n  // the this.context.client is the client object!!!\n  constructor(props) {\n    super(props);\n    this.state = {\n      // used true if data is loaded\n      loaded: false,\n      error: null,\n      patient: null,\n      questionnaire: null,\n      questionnaireResponse: null,\n      // variable for testing.\n      test: null,\n      // turns true if it's isobar\n      isIsobar: false // would be good if we have a array of question-answer pair.\n\n    };\n  }\n\n  componentDidMount() {\n    // questionnaire object\n    // Code is not inlcuded becaues it's not related to anything?\n    const client = this.context.client;\n    console.log(\"Component mounted\"); // These are number of async calls.\n\n    const loadPatient = client.patient.read().then(patient => {\n      this.setState({\n        patient,\n        loaded: false,\n        error: null\n      });\n      console.log(questionnaireObject.name); // Request the questionnaire responses by this patient\n      //return client.patient.request(\"QuestionnaireResponse\")\n    }); // is is the steam to retrieve the questionnaire object\n\n    const loadQuestionnaire = loadPatient.then(() => {\n      // WHy doesn't canonical url work?\n      //return client.request(questionnaireObject.url);\n      return client.request(\"Questionnaire?name=\" + questionnaireObject.name);\n    }).then(response => {\n      console.log(\"Questionnaires:\");\n      console.log(response);\n\n      if (response.total == 0) {\n        // there are no questionnaire object - create one\n        return client.create(questionnaireObject);\n      } else {\n        // return the existing questionnaire to be saved\n        return response.entry[0].resource;\n      }\n    }).then(response => {\n      // save the created/found questionnaire object\n      this.setState({\n        questionnaire: response\n      });\n    }); // this is the stream for questionnaireResponse object\n\n    const loadResponse = loadPatient.then(() => {\n      return client.patient.request(\"QuestionnaireResponse\");\n    }).then(response => {\n      console.log(\"Questionnaireresponse\");\n      console.log(response); // Find the response corresponding to isbar\n      //this.setState({questionnaireResponse: response});\n    }); // wait for all promise to resolve. and catch error\n\n    Promise.all([loadQuestionnaire, loadResponse]).then(values => {\n      this.setState({\n        loaded: true,\n        error: null\n      });\n    }).catch(error => {\n      console.error(error);\n      this.setState({\n        error,\n        loaded: false\n      });\n    });\n  } // function to change the form to isobar form.\n\n\n  changeToIsobar() {} // function that creates questionnaire\n\n\n  createQuestionnaire() {\n    this.client.create(questionnaireObject).then(response => {\n      console.log(\"Created questionnaire\");\n      console.log(response);\n    }).catch(console.error);\n  } // create new questionnaire response resource with this patient.\n\n\n  createQuestionnaireResponse() {\n    // questionnaire response resource\n    var qResponse = {\n      \"resourceType\": \"QuestionnaireResponse\",\n      \"questionnaire\": \"Questionnaire/\" + this.state.questionnaire.id,\n      \"status\": \"in-progress\",\n      \"authored\": \"2021-09-16T00:00:00+01:00\",\n      \"source\": {\n        \"reference\": \"Patient/\" + this.client.patient.id\n      },\n      \"item\": [{\n        \"linkId\": \"1\",\n        \"text\": this.state.questionnaire.text\n      }]\n    };\n    this.client.create(questionnaireObject).then(response => {\n      console.log(\"Created questionnaireResponse\");\n      console.log(response);\n    }).catch(console.error);\n  } // Load the text fields after the questionnaire and questionnaire responses are loaded.\n\n\n  render() {\n    //const client = this.context.client;\n    //this.state.client = this.context.client;\n    //this.state.value = this.context.client;\n    //var patient = this.state.value.patient;\n    if (this.state.loaded) {\n      if (this.state.isIsobar) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"isbar-input-fields\",\n          children: [/*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"I\",\n            heading: \"Heading\",\n            value: this.state.patient\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"S\",\n            heading: \"Heading\",\n            value: \"Loading....\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"O\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"B\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"A\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"R\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"isbar-input-fields\",\n          children: [/*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"I\",\n            heading: \"Heading\",\n            value: JSON.stringify(this.state.patient)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"S\",\n            heading: \"Heading\",\n            value: JSON.stringify(this.state.test)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"B\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"A\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"R\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this);\n      }\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"isbar-loading\",\n        children: \"Loading the ISBAR form..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\nIsbarSimpleInputField.contextType = IsbarClientContext;","map":{"version":3,"sources":["/Users/myoungseokjeong/Desktop/Masters/COMP3820_digital_health_software_project/Code/COMP3820-ISBAR/isbar-simple-react/src/IsbarSimpleInputField.js"],"names":["React","TextInputField","IsbarClientContext","questionnaireObject","IsbarSimpleInputField","Component","constructor","props","state","loaded","error","patient","questionnaire","questionnaireResponse","test","isIsobar","componentDidMount","client","context","console","log","loadPatient","read","then","setState","name","loadQuestionnaire","request","response","total","create","entry","resource","loadResponse","Promise","all","values","catch","changeToIsobar","createQuestionnaire","createQuestionnaireResponse","qResponse","id","text","render","JSON","stringify","contextType"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport TextInputField from \"./TextInputField\";\nimport { IsbarClientContext } from \"./IsbarFhirClient\";\nimport { questionnaireObject } from \"./QuestionnaireTemplates\";\n\n// Class for the input field group.\nexport class IsbarSimpleInputField extends React.Component {\n\n    // the this.context.client is the client object!!!\n    static contextType = IsbarClientContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // used true if data is loaded\n            loaded: false,\n            error: null,\n            patient: null,\n            questionnaire: null,\n            questionnaireResponse: null,\n            // variable for testing.\n            test: null,\n            // turns true if it's isobar\n            isIsobar: false,\n            // would be good if we have a array of question-answer pair.\n        };\n    }\n\n    componentDidMount() {\n        // questionnaire object\n        // Code is not inlcuded becaues it's not related to anything?\n\n        const client = this.context.client;\n        console.log(\"Component mounted\");\n        // These are number of async calls.\n        const loadPatient = client.patient\n            .read()\n            .then(patient => {\n                this.setState({ patient, loaded: false, error: null });\n                console.log(questionnaireObject.name);\n                // Request the questionnaire responses by this patient\n                //return client.patient.request(\"QuestionnaireResponse\")\n            });\n\n            // is is the steam to retrieve the questionnaire object\n        const loadQuestionnaire = loadPatient.then(() => {\n\n            // WHy doesn't canonical url work?\n            //return client.request(questionnaireObject.url);\n            return client.request(\"Questionnaire?name=\" + questionnaireObject.name);\n        }).then(response => {\n\n            console.log(\"Questionnaires:\");\n            console.log(response);\n            if(response.total == 0){\n                // there are no questionnaire object - create one\n                return client.create(questionnaireObject);\n            } else{\n                // return the existing questionnaire to be saved\n                return response.entry[0].resource;\n            }\n        }).then(response =>{\n            // save the created/found questionnaire object\n            this.setState({questionnaire: response});\n        });\n\n        // this is the stream for questionnaireResponse object\n        const loadResponse = loadPatient.then(() => {\n\n            return client.patient.request(\"QuestionnaireResponse\");\n        }).then(response => {\n            console.log(\"Questionnaireresponse\");\n            console.log(response);\n            // Find the response corresponding to isbar\n            //this.setState({questionnaireResponse: response});\n        });\n\n        // wait for all promise to resolve. and catch error\n        Promise.all([loadQuestionnaire, loadResponse]).then((values) => {\n            this.setState({ loaded: true, error: null });\n        })\n            .catch(error => {\n                console.error(error);\n                this.setState({ error, loaded: false });\n            });\n\n    }\n\n    // function to change the form to isobar form.\n    changeToIsobar() {\n\n    }\n\n    // function that creates questionnaire\n    createQuestionnaire() {\n        this.client.create(questionnaireObject).then(response => {\n            console.log(\"Created questionnaire\");\n            console.log(response);\n        }).catch(console.error);\n    }\n\n    // create new questionnaire response resource with this patient.\n    createQuestionnaireResponse() {\n        // questionnaire response resource\n        var qResponse = {\n            \"resourceType\": \"QuestionnaireResponse\",\n            \"questionnaire\": \"Questionnaire/\" + this.state.questionnaire.id,\n            \"status\": \"in-progress\",\n            \"authored\": \"2021-09-16T00:00:00+01:00\",\n            \"source\": {\n                \"reference\": \"Patient/\" + this.client.patient.id\n            },\n            \"item\": [\n                {\n                    \"linkId\": \"1\",\n                    \"text\": this.state.questionnaire.text\n                }\n            ]\n        }\n\n        this.client.create(questionnaireObject).then(response => {\n            console.log(\"Created questionnaireResponse\");\n            console.log(response);\n        }).catch(console.error);\n    }\n\n    // Load the text fields after the questionnaire and questionnaire responses are loaded.\n    render() {\n        //const client = this.context.client;\n        //this.state.client = this.context.client;\n        //this.state.value = this.context.client;\n        //var patient = this.state.value.patient;\n        if (this.state.loaded) {\n            if (this.state.isIsobar) {\n                return (\n                    <div className=\"isbar-input-fields\">\n                        <TextInputField label=\"I\" heading=\"Heading\" value={this.state.patient} />\n                        <TextInputField label=\"S\" heading=\"Heading\" value=\"Loading....\" />\n                        <TextInputField label=\"O\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"B\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"A\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"R\" heading=\"Heading\" value=\"Loading...\" />\n\n                    </div>\n                )\n            } else {\n                return (\n                    <div className=\"isbar-input-fields\">\n                        <TextInputField label=\"I\" heading=\"Heading\" value={JSON.stringify(this.state.patient)} />\n                        <TextInputField label=\"S\" heading=\"Heading\" value={JSON.stringify(this.state.test)} />\n                        <TextInputField label=\"B\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"A\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"R\" heading=\"Heading\" value=\"Loading...\" />\n                    </div>\n                )\n            }\n        } else {\n            return (\n                <div className=\"isbar-loading\">\n                    Loading the ISBAR form..\n                </div>\n            )\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}