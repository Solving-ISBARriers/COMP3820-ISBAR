{"ast":null,"code":"var _jsxFileName = \"/Users/myoungseokjeong/Desktop/Masters/COMP3820_digital_health_software_project/Code/COMP3820-ISBAR/isbar-simple-react/src/IsbarSimpleInputField.js\";\nimport React from \"react\";\nimport TextInputField from \"./TextInputField\";\nimport { IsbarClientContext } from \"./IsbarFhirClient\";\nimport { questionnaireObject } from \"./Questionnaire\";\nimport { runInThisContext } from \"vm\"; // Class for the input field group.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ISBARSimpleInputField extends React.Component {\n  // the this.context.client is the client object!!!\n  constructor(props) {\n    super(props);\n    this.state = {\n      // used true if data is loaded\n      loaded: false,\n      error: null,\n      patient: null,\n      questionnaire: null,\n      // turns true if it's isobar\n      isIsobar: false // would be good if we have a array of question-answer pair.\n\n    };\n  }\n\n  componentDidMount() {\n    // questionnaire object\n    // Code is not inlcuded becaues it's not related to anything?\n    const client = this.context.client;\n    console.log(\"Component mounted\"); // These are number of async calls.\n\n    this._loader = client.patient.read().then(patient => {\n      this.setState({\n        patient,\n        loaded: true,\n        error: null\n      }); // return the result from request\n      //return client.request(\"QuestionnaireResponse/\" + questionnaireObject.name)\n    }) // .then( response =>{\n    //     console.log(response);\n    // })\n    .catch(error => {\n      this.setState({\n        error,\n        loading: false\n      });\n    }); // Search for the questionnaire\n    // if it's not there, create questionnaire\n    // the questionnaire\n    // client.create(questionnaireObject).then(questionnaire => {\n    //     this.setState({ questionnaire })\n    //     console.log(this.state.questionnaire);\n    // }).catch(console.error);\n  } // function to change the form to isobar form.\n\n\n  changeToIsobar() {} // Load the text fields after the questionnaire and questionnaire responses are loaded.\n\n\n  render() {\n    //const client = this.context.client;\n    //this.state.client = this.context.client;\n    //this.state.value = this.context.client;\n    //var patient = this.state.value.patient;\n    if (this.state.loaded) {\n      if (this.state.isIsobar) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"isbar-input-fields\",\n          children: [/*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"I\",\n            heading: \"Heading\",\n            value: this.state.patient\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"S\",\n            heading: \"Heading\",\n            value: \"Loading....\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"O\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"B\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"A\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"R\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"isbar-input-fields\",\n          children: [/*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"I\",\n            heading: \"Heading\",\n            value: this.state.patient\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"S\",\n            heading: \"Heading\",\n            value: \"Loading....\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"B\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"A\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            label: \"R\",\n            heading: \"Heading\",\n            value: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this);\n      }\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"isbar-loading\",\n        children: \"Loading the ISBAR form..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\nISBARSimpleInputField.contextType = IsbarClientContext;","map":{"version":3,"sources":["/Users/myoungseokjeong/Desktop/Masters/COMP3820_digital_health_software_project/Code/COMP3820-ISBAR/isbar-simple-react/src/IsbarSimpleInputField.js"],"names":["React","TextInputField","IsbarClientContext","questionnaireObject","runInThisContext","ISBARSimpleInputField","Component","constructor","props","state","loaded","error","patient","questionnaire","isIsobar","componentDidMount","client","context","console","log","_loader","read","then","setState","catch","loading","changeToIsobar","render","contextType"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA,SAASC,mBAAT,QAAoC,iBAApC;AACA,SAASC,gBAAT,QAAiC,IAAjC,C,CAEA;;;AACA,OAAO,MAAMC,qBAAN,SAAoCL,KAAK,CAACM,SAA1C,CAAoD;AAEvD;AAGAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACT;AACAC,MAAAA,MAAM,EAAE,KAFC;AAGTC,MAAAA,KAAK,EAAE,IAHE;AAITC,MAAAA,OAAO,EAAE,IAJA;AAKTC,MAAAA,aAAa,EAAE,IALN;AAMT;AACAC,MAAAA,QAAQ,EAAE,KAPD,CAQT;;AARS,KAAb;AAUH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB;AACA;AAEA,UAAMC,MAAM,GAAG,KAAKC,OAAL,CAAaD,MAA5B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EALgB,CAMhB;;AACA,SAAKC,OAAL,GAAeJ,MAAM,CAACJ,OAAP,CACVS,IADU,GAEVC,IAFU,CAELV,OAAO,IAAI;AACb,WAAKW,QAAL,CAAc;AAAEX,QAAAA,OAAF;AAAWF,QAAAA,MAAM,EAAE,IAAnB;AAAyBC,QAAAA,KAAK,EAAE;AAAhC,OAAd,EADa,CAEb;AACA;AACH,KANU,EAQX;AACA;AACA;AAVW,KAWVa,KAXU,CAWJb,KAAK,IAAI;AACZ,WAAKY,QAAL,CAAc;AAAEZ,QAAAA,KAAF;AAASc,QAAAA,OAAO,EAAE;AAAlB,OAAd;AACH,KAbU,CAAf,CAPgB,CAqBhB;AAEA;AACI;AACJ;AACA;AACA;AACA;AACH,GAhDsD,CAkDvD;;;AACAC,EAAAA,cAAc,GAAG,CAEhB,CArDsD,CAuDvD;;;AACAC,EAAAA,MAAM,GAAG;AACL;AACA;AACA;AACA;AACA,QAAI,KAAKlB,KAAL,CAAWC,MAAf,EAAuB;AACnB,UAAI,KAAKD,KAAL,CAAWK,QAAf,EAAyB;AACrB,4BACI;AAAK,UAAA,SAAS,EAAC,oBAAf;AAAA,kCACI,QAAC,cAAD;AAAgB,YAAA,KAAK,EAAC,GAAtB;AAA0B,YAAA,OAAO,EAAC,SAAlC;AAA4C,YAAA,KAAK,EAAE,KAAKL,KAAL,CAAWG;AAA9D;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,cAAD;AAAgB,YAAA,KAAK,EAAC,GAAtB;AAA0B,YAAA,OAAO,EAAC,SAAlC;AAA4C,YAAA,KAAK,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI,QAAC,cAAD;AAAgB,YAAA,KAAK,EAAC,GAAtB;AAA0B,YAAA,OAAO,EAAC,SAAlC;AAA4C,YAAA,KAAK,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAII,QAAC,cAAD;AAAgB,YAAA,KAAK,EAAC,GAAtB;AAA0B,YAAA,OAAO,EAAC,SAAlC;AAA4C,YAAA,KAAK,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,kBAJJ,eAKI,QAAC,cAAD;AAAgB,YAAA,KAAK,EAAC,GAAtB;AAA0B,YAAA,OAAO,EAAC,SAAlC;AAA4C,YAAA,KAAK,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,kBALJ,eAMI,QAAC,cAAD;AAAgB,YAAA,KAAK,EAAC,GAAtB;AAA0B,YAAA,OAAO,EAAC,SAAlC;AAA4C,YAAA,KAAK,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,kBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;AAWH,OAZD,MAYO;AACH,4BACI;AAAK,UAAA,SAAS,EAAC,oBAAf;AAAA,kCACI,QAAC,cAAD;AAAgB,YAAA,KAAK,EAAC,GAAtB;AAA0B,YAAA,OAAO,EAAC,SAAlC;AAA4C,YAAA,KAAK,EAAE,KAAKH,KAAL,CAAWG;AAA9D;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,cAAD;AAAgB,YAAA,KAAK,EAAC,GAAtB;AAA0B,YAAA,OAAO,EAAC,SAAlC;AAA4C,YAAA,KAAK,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI,QAAC,cAAD;AAAgB,YAAA,KAAK,EAAC,GAAtB;AAA0B,YAAA,OAAO,EAAC,SAAlC;AAA4C,YAAA,KAAK,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAII,QAAC,cAAD;AAAgB,YAAA,KAAK,EAAC,GAAtB;AAA0B,YAAA,OAAO,EAAC,SAAlC;AAA4C,YAAA,KAAK,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,kBAJJ,eAKI,QAAC,cAAD;AAAgB,YAAA,KAAK,EAAC,GAAtB;AAA0B,YAAA,OAAO,EAAC,SAAlC;AAA4C,YAAA,KAAK,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,kBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;AASH;AACJ,KAxBD,MAwBO;AACH,0BACI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH;AACJ;;AA5FsD;AAA9CP,qB,CAGFuB,W,GAAc1B,kB","sourcesContent":["import React from \"react\";\nimport TextInputField from \"./TextInputField\";\nimport { IsbarClientContext } from \"./IsbarFhirClient\";\nimport { questionnaireObject } from \"./Questionnaire\";\nimport { runInThisContext } from \"vm\";\n\n// Class for the input field group.\nexport class ISBARSimpleInputField extends React.Component {\n\n    // the this.context.client is the client object!!!\n    static contextType = IsbarClientContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // used true if data is loaded\n            loaded: false,\n            error: null,\n            patient: null,\n            questionnaire: null,\n            // turns true if it's isobar\n            isIsobar: false,\n            // would be good if we have a array of question-answer pair.\n        };\n    }\n\n    componentDidMount() {\n        // questionnaire object\n        // Code is not inlcuded becaues it's not related to anything?\n        \n        const client = this.context.client;\n        console.log(\"Component mounted\");\n        // These are number of async calls.\n        this._loader = client.patient\n            .read()\n            .then(patient => {\n                this.setState({ patient, loaded: true, error: null });\n                // return the result from request\n                //return client.request(\"QuestionnaireResponse/\" + questionnaireObject.name)\n            })\n\n            // .then( response =>{\n            //     console.log(response);\n            // })\n            .catch(error => {\n                this.setState({ error, loading: false });\n            });\n        // Search for the questionnaire\n        \n        // if it's not there, create questionnaire\n            // the questionnaire\n        // client.create(questionnaireObject).then(questionnaire => {\n        //     this.setState({ questionnaire })\n        //     console.log(this.state.questionnaire);\n        // }).catch(console.error);\n    }\n\n    // function to change the form to isobar form.\n    changeToIsobar() {\n\n    }\n\n    // Load the text fields after the questionnaire and questionnaire responses are loaded.\n    render() {\n        //const client = this.context.client;\n        //this.state.client = this.context.client;\n        //this.state.value = this.context.client;\n        //var patient = this.state.value.patient;\n        if (this.state.loaded) {\n            if (this.state.isIsobar) {\n                return (\n                    <div className=\"isbar-input-fields\">\n                        <TextInputField label=\"I\" heading=\"Heading\" value={this.state.patient} />\n                        <TextInputField label=\"S\" heading=\"Heading\" value=\"Loading....\" />\n                        <TextInputField label=\"O\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"B\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"A\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"R\" heading=\"Heading\" value=\"Loading...\" />\n\n                    </div>\n                )\n            } else {\n                return (\n                    <div className=\"isbar-input-fields\">\n                        <TextInputField label=\"I\" heading=\"Heading\" value={this.state.patient} />\n                        <TextInputField label=\"S\" heading=\"Heading\" value=\"Loading....\" />\n                        <TextInputField label=\"B\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"A\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"R\" heading=\"Heading\" value=\"Loading...\" />\n                    </div>\n                )\n            }\n        } else {\n            return (\n                <div className=\"isbar-loading\">\n                    Loading the ISBAR form..\n                </div>\n            )\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}