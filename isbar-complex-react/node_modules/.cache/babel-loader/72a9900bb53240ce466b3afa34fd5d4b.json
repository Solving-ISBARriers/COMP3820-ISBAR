{"ast":null,"code":"var _jsxFileName = \"/Users/myoungseokjeong/Desktop/Masters/COMP3820_digital_health_software_project/Code/COMP3820-ISBAR/isbar-complex-react/src/IsbarSimpleApp.js\";\nimport React from \"react\";\nimport TextInputField from \"./TextInputField\";\nimport TextAreaField from \"./TextAreaField\";\nimport { IsbarClientContext } from \"./IsbarFhirClient\";\nimport { isbarQuestionnaire, newQuestionnaireResponse } from \"./QuestionnaireTemplates\";\nimport { IsbarDoc } from \"./IsbarDoc\";\nimport { PDFDownloadLink } from \"@react-pdf/renderer\"; // Class for the input field group.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class IsbarSimpleApp extends React.Component {\n  // the this.context.client is the client object!!!\n  constructor(props) {\n    super(props);\n    this.state = {\n      // used true if data is loaded\n      loaded: false,\n      error: null,\n      // true if questionnaireResponse exists\n      responseExist: false,\n      patient: null,\n      questionnaire: null,\n      questionnaireResponse: null,\n      // turns true if it's isobar\n      isIsobar: false,\n      saveState: \"edited\",\n      formState: \"ISOBAR\" // would be good if we have a array of question-answer pair.\n\n    };\n  }\n\n  componentDidMount() {\n    // load client from the client context\n    const client = this.context.client; // Promise to set the patient... for?\n    //const loadPatient = client.patient.read().then(patient => this.setState({patient: patient}))\n    // Promise to load/create questionnaire\n\n    client.request(\"Questionnaire?name=\" + isbarQuestionnaire.name).then(response => {\n      // Check if questionnaire exist or not\n      console.log(\"Questionnaires:\");\n      console.log(response);\n\n      if (response.total === 0) {\n        // there are no questionnaire object - create one\n        return client.create(isbarQuestionnaire);\n      } else {\n        // return the existing questionnaire to be saved\n        return response.entry[0].resource;\n      }\n    }).then(result => {\n      // save questionnaire, request questionnaireResponse\n      this.setState({\n        questionnaire: result\n      });\n      return client.request(\"QuestionnaireResponse?source=Patient/\" + this.context.client.patient.id);\n    }).then(response => {\n      // Check if there's an existing questionnaireResponse\n      console.log(\"Questionnaire Responses:\");\n      console.log(response);\n      var qResponse;\n\n      if (response.total > 0) {\n        if (response.entry.some(element => {\n          qResponse = element.resource;\n          return this.checkExistingResponse(element.resource);\n        })) {\n          // response that fulfills the criteria exists\n          console.log(\"Selected Response\");\n          console.log(qResponse);\n          return qResponse;\n        }\n      } // no isbar responses - create one\n\n\n      console.log(\"No ISBAR questionnaire response from this patient. Creating one..\");\n      return client.create(newQuestionnaireResponse(this.state.questionnaire.id, this.context.client.patient.id));\n    }).then(result => {\n      console.log(\"Questionnaire response result\");\n      console.log(result); // save the response object, finish loading\n\n      this.setState({\n        questionnaireResponse: result,\n        loaded: true,\n        error: null\n      });\n    }).catch(error => {\n      console.error(error);\n      this.setState({\n        error,\n        loaded: false\n      });\n    });\n  } // check if the given resource is QuestionnaireResponse for isbar\n  // still need some check to see if it is actually for isbar\n\n\n  checkExistingResponse(resource) {\n    if (resource.source.reference === \"Patient/\" + this.context.client.patient.id && resource.questionnaire === \"Questionnaire/\" + this.state.questionnaire.id) {\n      return true;\n    }\n\n    return false;\n  } // function to send update request\n\n\n  updateResponse() {\n    console.log(\"Updated response: \" + JSON.stringify(this.state.questionnaireResponse));\n    this.context.client.update(this.state.questionnaireResponse).then(response => {\n      console.log(response);\n      this.setState({\n        saveState: \"saved\"\n      });\n    }).catch(console.error);\n  } // this is the function for changing value\n  // changes answer string in the questionnaireresponse object with given index\n  // updates questionnaireresponse state\n\n\n  handleChange(event, index) {\n    var response = this.state.questionnaireResponse;\n\n    if (response.item[index].hasOwnProperty(\"answer\")) {\n      response.item[index].answer[0].valueString = event.target.value;\n    } else {\n      response.item[index].answer = [{\n        valueString: event.target.value\n      }];\n    }\n\n    this.setState({\n      questionnaireResponse: response\n    });\n\n    if (this.state.saveState === \"saved\") {\n      this.setState({\n        saveState: \"edited\"\n      });\n    }\n  }\n\n  printPDF() {} // Load the text fields after the questionnaire and questionnaire responses are loaded.\n\n\n  render() {\n    // questionnaire response object\n    if (this.state.loaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Is ISOBAR:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"isISOBAR\",\n            type: \"checkbox\",\n            checked: this.state.isIsobar,\n            onChange: () => this.setState(prevState => ({\n              isIsobar: !prevState.isIsobar\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"State:\", this.state.saveState]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n          index: \"0\",\n          formID: \"introduction\",\n          label: \"Introduction\",\n          placeholder: \"Introduction\",\n          item: this.state.questionnaireResponse.item[0],\n          handleChange: this.handleChange.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n          index: \"1\",\n          formID: \"situation\",\n          label: \"Situation\",\n          placeholder: \"Situation\",\n          item: this.state.questionnaireResponse.item[1],\n          handleChange: this.handleChange.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n          index: \"2\",\n          formID: \"Observation\",\n          label: \"Observation\",\n          placeholder: \"Observation\",\n          item: this.state.questionnaireResponse.item[2],\n          render: this.state.isIsobar,\n          handleChange: this.handleChange.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n          index: \"3\",\n          formID: \"background\",\n          label: \"Background\",\n          placeholder: \"Background\",\n          item: this.state.questionnaireResponse.item[3],\n          handleChange: this.handleChange.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n          index: \"4\",\n          formID: \"assessment\",\n          label: \"Assessment\",\n          placeholder: \"Assessment\",\n          item: this.state.questionnaireResponse.item[4],\n          handleChange: this.handleChange.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextAreaField, {\n          index: \"5\",\n          formID: \"recommendation\",\n          label: \"Recommendation\",\n          placeholder: \"Recommendation\",\n          item: this.state.questionnaireResponse.item[5],\n          handleChange: this.handleChange.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"isbar-save\",\n          onClick: () => this.updateResponse(),\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"isbar-save\",\n          children: /*#__PURE__*/_jsxDEV(PDFDownloadLink, {\n            document: /*#__PURE__*/_jsxDEV(IsbarDoc, {\n              content: this.state.questionnaireResponse\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 17\n            }, this),\n            fileName: \"isbar.pdf\",\n            children: ({\n              blob,\n              url,\n              loading,\n              error\n            }) => loading ? \"Preparing\" : \"Print\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"isbar-loading\",\n        children: \"Loading the ISBAR form..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 14\n      }, this);\n    }\n  }\n\n}\nIsbarSimpleApp.contextType = IsbarClientContext;","map":{"version":3,"sources":["/Users/myoungseokjeong/Desktop/Masters/COMP3820_digital_health_software_project/Code/COMP3820-ISBAR/isbar-complex-react/src/IsbarSimpleApp.js"],"names":["React","TextInputField","TextAreaField","IsbarClientContext","isbarQuestionnaire","newQuestionnaireResponse","IsbarDoc","PDFDownloadLink","IsbarSimpleApp","Component","constructor","props","state","loaded","error","responseExist","patient","questionnaire","questionnaireResponse","isIsobar","saveState","formState","componentDidMount","client","context","request","name","then","response","console","log","total","create","entry","resource","result","setState","id","qResponse","some","element","checkExistingResponse","catch","source","reference","updateResponse","JSON","stringify","update","handleChange","event","index","item","hasOwnProperty","answer","valueString","target","value","printPDF","render","prevState","bind","blob","url","loading","contextType"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport TextInputField from \"./TextInputField\";\nimport TextAreaField from \"./TextAreaField\";\nimport { IsbarClientContext } from \"./IsbarFhirClient\";\nimport { isbarQuestionnaire, newQuestionnaireResponse } from \"./QuestionnaireTemplates\";\nimport { IsbarDoc } from \"./IsbarDoc\";\nimport { PDFDownloadLink } from \"@react-pdf/renderer\";\n\n\n// Class for the input field group.\nexport class IsbarSimpleApp extends React.Component {\n  // the this.context.client is the client object!!!\n  static contextType = IsbarClientContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      // used true if data is loaded\n      loaded: false,\n      error: null,\n      // true if questionnaireResponse exists\n      responseExist: false,\n\n      patient: null,\n      questionnaire: null,\n      questionnaireResponse: null,\n      // turns true if it's isobar\n      isIsobar: false,\n      saveState: \"edited\",\n      formState: \"ISOBAR\"\n      // would be good if we have a array of question-answer pair.\n    };\n  }\n\n  componentDidMount() {\n    // load client from the client context\n    const client = this.context.client;\n\n    // Promise to set the patient... for?\n    //const loadPatient = client.patient.read().then(patient => this.setState({patient: patient}))\n\n    // Promise to load/create questionnaire\n    client.request(\"Questionnaire?name=\" + isbarQuestionnaire.name)\n      .then((response) => {\n        // Check if questionnaire exist or not\n\n        console.log(\"Questionnaires:\");\n        console.log(response);\n        if (response.total === 0) {\n          // there are no questionnaire object - create one\n          return client.create(isbarQuestionnaire);\n        } else {\n          // return the existing questionnaire to be saved\n          return response.entry[0].resource;\n        }\n      })\n      .then((result) => {\n        // save questionnaire, request questionnaireResponse\n\n        this.setState({ questionnaire: result });\n        return client.request(\n          \"QuestionnaireResponse?source=Patient/\" +\n          this.context.client.patient.id\n        );\n      })\n      .then((response) => {\n        // Check if there's an existing questionnaireResponse\n\n        console.log(\"Questionnaire Responses:\");\n        console.log(response);\n        var qResponse;\n\n        if (response.total > 0) {\n          if (\n            response.entry.some((element) => {\n              qResponse = element.resource;\n              return this.checkExistingResponse(element.resource);\n            })\n          ) {\n\n            // response that fulfills the criteria exists\n            console.log(\"Selected Response\");\n            console.log(qResponse)\n\n            return qResponse;\n          }\n        }\n        // no isbar responses - create one\n        console.log(\n          \"No ISBAR questionnaire response from this patient. Creating one..\"\n        );\n        return client.create(newQuestionnaireResponse(\n          this.state.questionnaire.id,\n          this.context.client.patient.id\n        ));\n      })\n      .then((result) => {\n        console.log(\"Questionnaire response result\");\n        console.log(result);\n        // save the response object, finish loading\n        this.setState({\n          questionnaireResponse: result,\n          loaded: true,\n          error: null,\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n        this.setState({ error, loaded: false });\n      });\n  }\n\n  // check if the given resource is QuestionnaireResponse for isbar\n  // still need some check to see if it is actually for isbar\n  checkExistingResponse(resource) {\n    if (\n      resource.source.reference ===\n      \"Patient/\" + this.context.client.patient.id &&\n      resource.questionnaire === \"Questionnaire/\" + this.state.questionnaire.id\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  // function to send update request\n  updateResponse() {\n    console.log(\n      \"Updated response: \" + JSON.stringify(this.state.questionnaireResponse)\n    );\n    this.context.client\n      .update(this.state.questionnaireResponse)\n      .then((response) => {\n        console.log(response);\n        this.setState({ saveState: \"saved\" })\n      })\n      .catch(console.error);\n  }\n\n\n  // this is the function for changing value\n  // changes answer string in the questionnaireresponse object with given index\n  // updates questionnaireresponse state\n  handleChange(event, index) {\n    var response = this.state.questionnaireResponse;\n\n    if (response.item[index].hasOwnProperty(\"answer\")) {\n      response.item[index].answer[0].valueString = event.target.value;\n    } else {\n      response.item[index].answer = [\n        {\n          valueString: event.target.value,\n        },\n      ];\n    }\n\n    this.setState({ questionnaireResponse: response });\n    if (this.state.saveState === \"saved\") {\n      this.setState({ saveState: \"edited\" })\n    }\n  }\n\n  printPDF() { }\n\n  // Load the text fields after the questionnaire and questionnaire responses are loaded.\n  render() {\n    // questionnaire response object\n\n    if (this.state.loaded) {\n      return (\n        <div className=\"container\">\n\n          {/* <button\n            className=\"isbar-save\"\n            onClick={() => {\n              this.state.isIsobar ? this.setState({ formState: \"ISOBAR\" }) : this.setState({ formState: \"ISBAR\" })\n              this.setState(prevState => ({ isIsobar: !prevState.isIsobar }))\n            }}\n          >\n            {this.state.formState}\n          </button>\n           */}\n\n          <label>\n            Is ISOBAR:\n            <input\n              name=\"isISOBAR\"\n              type=\"checkbox\"\n              checked={this.state.isIsobar}\n              onChange={() => this.setState(prevState => ({ isIsobar: !prevState.isIsobar }))}\n            />\n          </label>\n          <p>\n            State:\n            {this.state.saveState}\n          </p>\n\n          <TextInputField\n            index=\"0\"\n            formID=\"introduction\"\n            label=\"Introduction\"\n            placeholder=\"Introduction\"\n            item={this.state.questionnaireResponse.item[0]}\n            handleChange={this.handleChange.bind(this)}\n          />\n          <TextInputField\n            index=\"1\"\n            formID=\"situation\"\n            label=\"Situation\"\n            placeholder=\"Situation\"\n            item={this.state.questionnaireResponse.item[1]}\n            handleChange={this.handleChange.bind(this)}\n          />\n          <TextInputField\n            index=\"2\"\n            formID=\"Observation\"\n            label=\"Observation\"\n            placeholder=\"Observation\"\n            item={this.state.questionnaireResponse.item[2]}\n            render={this.state.isIsobar}\n            handleChange={this.handleChange.bind(this)}\n          />\n          <TextInputField\n            index=\"3\"\n            formID=\"background\"\n            label=\"Background\"\n            placeholder=\"Background\"\n            item={this.state.questionnaireResponse.item[3]}\n            handleChange={this.handleChange.bind(this)}\n          />\n          <TextInputField\n            index=\"4\"\n            formID=\"assessment\"\n            label=\"Assessment\"\n            placeholder=\"Assessment\"\n            item={this.state.questionnaireResponse.item[4]}\n            handleChange={this.handleChange.bind(this)}\n          />\n          <TextAreaField\n            index=\"5\"\n            formID=\"recommendation\"\n            label=\"Recommendation\"\n            placeholder=\"Recommendation\"\n            item={this.state.questionnaireResponse.item[5]}\n            handleChange={this.handleChange.bind(this)}\n          />\n          <button\n            className=\"isbar-save\"\n            onClick={() => this.updateResponse()}\n          >\n            Save\n          </button>\n\n          <button className=\"isbar-save\">\n            <PDFDownloadLink\n              document={\n                <IsbarDoc content={this.state.questionnaireResponse} />\n              }\n              fileName=\"isbar.pdf\"\n            >\n              {({ blob, url, loading, error }) =>\n                loading ? \"Preparing\" : \"Print\"\n              }\n            </PDFDownloadLink>\n          </button>\n        </div>\n\n      )\n    } else {\n      return <div className=\"isbar-loading\">Loading the ISBAR form..</div>;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}