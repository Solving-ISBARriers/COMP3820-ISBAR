{"ast":null,"code":"\"use strict\";\n/*\n * This file contains some shared functions. They are used by other modules, but\n * are defined here so that tests can import this library and test them.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst HttpError_1 = require(\"./HttpError\");\n\nconst settings_1 = require(\"./settings\");\n\nconst debug = require(\"debug\"); // $lab:coverage:off$\n// @ts-ignore\n\n\nconst {\n  fetch\n} = typeof FHIRCLIENT_PURE !== \"undefined\" ? window : require(\"cross-fetch\"); // $lab:coverage:on$\n\nconst _debug = debug(\"FHIR\");\n\nexports.debug = _debug;\n/**\n * The cache for the `getAndCache` function\n */\n\nconst cache = {};\n/**\n * A namespace with functions for converting between different measurement units\n */\n\nexports.units = {\n  cm({\n    code,\n    value\n  }) {\n    ensureNumerical({\n      code,\n      value\n    });\n    if (code == \"cm\") return value;\n    if (code == \"m\") return value * 100;\n    if (code == \"in\") return value * 2.54;\n    if (code == \"[in_us]\") return value * 2.54;\n    if (code == \"[in_i]\") return value * 2.54;\n    if (code == \"ft\") return value * 30.48;\n    if (code == \"[ft_us]\") return value * 30.48;\n    throw new Error(\"Unrecognized length unit: \" + code);\n  },\n\n  kg({\n    code,\n    value\n  }) {\n    ensureNumerical({\n      code,\n      value\n    });\n    if (code == \"kg\") return value;\n    if (code == \"g\") return value / 1000;\n    if (code.match(/lb/)) return value / 2.20462;\n    if (code.match(/oz/)) return value / 35.274;\n    throw new Error(\"Unrecognized weight unit: \" + code);\n  },\n\n  any(pq) {\n    ensureNumerical(pq);\n    return pq.value;\n  }\n\n};\n/**\n * Assertion function to guard arguments for `units` functions\n */\n\nfunction ensureNumerical({\n  value,\n  code\n}) {\n  if (typeof value !== \"number\") {\n    throw new Error(\"Found a non-numerical unit: \" + value + \" \" + code);\n  }\n}\n/**\n * Used in fetch Promise chains to reject if the \"ok\" property is not true\n */\n\n\nasync function checkResponse(resp) {\n  if (!resp.ok) {\n    throw await humanizeError(resp);\n  }\n\n  return resp;\n}\n\nexports.checkResponse = checkResponse;\n/**\n * Used in fetch Promise chains to return the JSON version of the response.\n * Note that `resp.json()` will throw on empty body so we use resp.text()\n * instead.\n */\n\nfunction responseToJSON(resp) {\n  return resp.text().then(text => text.length ? JSON.parse(text) : \"\");\n}\n\nexports.responseToJSON = responseToJSON;\n/**\n * This is our built-in request function. It does a few things by default\n * (unless told otherwise):\n * - Makes CORS requests\n * - Sets accept header to \"application/json\"\n * - Handles errors\n * - If the response is json return the json object\n * - If the response is text return the result text\n * - Otherwise return the response object on which we call stuff like `.blob()`\n */\n\nfunction request(url, options = {}) {\n  return fetch(url, Object.assign(Object.assign({\n    mode: \"cors\"\n  }, options), {\n    headers: Object.assign({\n      accept: \"application/json\"\n    }, options.headers)\n  })).then(checkResponse).then(res => {\n    const type = res.headers.get(\"Content-Type\") + \"\";\n\n    if (type.match(/\\bjson\\b/i)) {\n      return responseToJSON(res);\n    }\n\n    if (type.match(/^text\\//i)) {\n      return res.text();\n    }\n\n    return res;\n  });\n}\n\nexports.request = request;\n/**\n * Makes a request using `fetch` and stores the result in internal memory cache.\n * The cache is cleared when the page is unloaded.\n * @param url The URL to request\n * @param requestOptions Request options\n * @param force If true, reload from source and update the cache, even if it has\n * already been cached.\n */\n\nfunction getAndCache(url, requestOptions, force = process.env.NODE_ENV === \"test\") {\n  if (force || !cache[url]) {\n    cache[url] = request(url, requestOptions);\n    return cache[url];\n  }\n\n  return Promise.resolve(cache[url]);\n}\n\nexports.getAndCache = getAndCache;\n/**\n * Fetches the conformance statement from the given base URL.\n * Note that the result is cached in memory (until the page is reloaded in the\n * browser) because it might have to be re-used by the client\n * @param baseUrl The base URL of the FHIR server\n * @param [requestOptions] Any options passed to the fetch call\n */\n\nfunction fetchConformanceStatement(baseUrl = \"/\", requestOptions) {\n  const url = String(baseUrl).replace(/\\/*$/, \"/\") + \"metadata\";\n  return getAndCache(url, requestOptions).catch(ex => {\n    throw new Error(`Failed to fetch the conformance statement from \"${url}\". ${ex}`);\n  });\n}\n\nexports.fetchConformanceStatement = fetchConformanceStatement;\n/**\n * Given a response object, generates and throws detailed HttpError.\n * @param resp The `Response` object of a failed `fetch` request\n */\n\nasync function humanizeError(resp) {\n  let msg = `${resp.status} ${resp.statusText}\\nURL: ${resp.url}`;\n\n  try {\n    const type = resp.headers.get(\"Content-Type\") || \"text/plain\";\n\n    if (type.match(/\\bjson\\b/i)) {\n      const json = await resp.json();\n\n      if (json.error) {\n        msg += \"\\n\" + json.error;\n\n        if (json.error_description) {\n          msg += \": \" + json.error_description;\n        }\n      } else {\n        msg += \"\\n\\n\" + JSON.stringify(json, null, 4);\n      }\n    }\n\n    if (type.match(/^text\\//i)) {\n      const text = await resp.text();\n\n      if (text) {\n        msg += \"\\n\\n\" + text;\n      }\n    }\n  } catch (_) {// ignore\n  }\n\n  throw new HttpError_1.default(msg, resp.status, resp.statusText);\n}\n\nexports.humanizeError = humanizeError;\n/**\n * Walks through an object (or array) and returns the value found at the\n * provided path. This function is very simple so it intentionally does not\n * support any argument polymorphism, meaning that the path can only be a\n * dot-separated string. If the path is invalid returns undefined.\n * @param obj The object (or Array) to walk through\n * @param path The path (eg. \"a.b.4.c\")\n * @returns {*} Whatever is found in the path or undefined\n */\n\nfunction getPath(obj, path = \"\") {\n  path = path.trim();\n\n  if (!path) {\n    return obj;\n  }\n\n  return path.split(\".\").reduce((out, key) => out ? out[key] : undefined, obj);\n}\n\nexports.getPath = getPath;\n/**\n * Like getPath, but if the node is found, its value is set to @value\n * @param obj   The object (or Array) to walk through\n * @param path  The path (eg. \"a.b.4.c\")\n * @param value The value to set\n * @returns The modified object\n */\n\nfunction setPath(obj, path, value) {\n  path.trim().split(\".\").reduce((out, key, idx, arr) => {\n    if (out && idx === arr.length - 1) {\n      out[key] = value;\n    } else {\n      return out ? out[key] : undefined;\n    }\n  }, obj);\n  return obj;\n}\n\nexports.setPath = setPath;\n/**\n * If the argument is an array returns it as is. Otherwise puts it in an array\n * (`[arg]`) and returns the result\n * @param arg The element to test and possibly convert to array\n * @category Utility\n */\n\nfunction makeArray(arg) {\n  if (Array.isArray(arg)) {\n    return arg;\n  }\n\n  return [arg];\n}\n\nexports.makeArray = makeArray;\n/**\n * Given a path, converts it to absolute url based on the `baseUrl`. If baseUrl\n * is not provided, the result would be a rooted path (one that starts with `/`).\n * @param path The path to convert\n * @param baseUrl The base URL\n */\n\nfunction absolute(path, baseUrl) {\n  if (path.match(/^http/)) return path;\n  if (path.match(/^urn/)) return path;\n  return String(baseUrl || \"\").replace(/\\/+$/, \"\") + \"/\" + path.replace(/^\\/+/, \"\");\n}\n\nexports.absolute = absolute;\n/**\n * Generates random strings. By default this returns random 8 characters long\n * alphanumeric strings.\n * @param strLength The length of the output string. Defaults to 8.\n * @param charSet A string containing all the possible characters.\n *     Defaults to all the upper and lower-case letters plus digits.\n * @category Utility\n */\n\nfunction randomString(strLength = 8, charSet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\") {\n  const result = [];\n  const len = charSet.length;\n\n  while (strLength--) {\n    result.push(charSet.charAt(Math.floor(Math.random() * len)));\n  }\n\n  return result.join(\"\");\n}\n\nexports.randomString = randomString;\n/**\n * Decodes a JWT token and returns it's body.\n * @param token The token to read\n * @param env An `Adapter` or any other object that has an `atob` method\n * @category Utility\n */\n\nfunction jwtDecode(token, env) {\n  const payload = token.split(\".\")[1];\n  return JSON.parse(env.atob(payload));\n}\n\nexports.jwtDecode = jwtDecode;\n/**\n * Groups the observations by code. Returns a map that will look like:\n * ```js\n * const map = client.byCodes(observations, \"code\");\n * // map = {\n * //     \"55284-4\": [ observation1, observation2 ],\n * //     \"6082-2\": [ observation3 ]\n * // }\n * ```\n * @param observations Array of observations\n * @param property The name of a CodeableConcept property to group by\n */\n\nfunction byCode(observations, property) {\n  const ret = {};\n\n  function handleCodeableConcept(concept, observation) {\n    if (concept && Array.isArray(concept.coding)) {\n      concept.coding.forEach(({\n        code\n      }) => {\n        if (code) {\n          ret[code] = ret[code] || [];\n          ret[code].push(observation);\n        }\n      });\n    }\n  }\n\n  makeArray(observations).forEach(o => {\n    if (o.resourceType === \"Observation\" && o[property]) {\n      if (Array.isArray(o[property])) {\n        o[property].forEach(concept => handleCodeableConcept(concept, o));\n      } else {\n        handleCodeableConcept(o[property], o);\n      }\n    }\n  });\n  return ret;\n}\n\nexports.byCode = byCode;\n/**\n * First groups the observations by code using `byCode`. Then returns a function\n * that accepts codes as arguments and will return a flat array of observations\n * having that codes. Example:\n * ```js\n * const filter = client.byCodes(observations, \"category\");\n * filter(\"laboratory\") // => [ observation1, observation2 ]\n * filter(\"vital-signs\") // => [ observation3 ]\n * filter(\"laboratory\", \"vital-signs\") // => [ observation1, observation2, observation3 ]\n * ```\n * @param observations Array of observations\n * @param property The name of a CodeableConcept property to group by\n */\n\nfunction byCodes(observations, property) {\n  const bank = byCode(observations, property);\n  return (...codes) => codes.filter(code => code + \"\" in bank).reduce((prev, code) => prev.concat(bank[code + \"\"]), []);\n}\n\nexports.byCodes = byCodes;\n/**\n * Given a conformance statement and a resource type, returns the name of the\n * URL parameter that can be used to scope the resource type by patient ID.\n */\n\nfunction getPatientParam(conformance, resourceType) {\n  // Find what resources are supported by this server\n  const resources = getPath(conformance, \"rest.0.resource\") || []; // Check if this resource is supported\n\n  const meta = resources.find(r => r.type === resourceType);\n\n  if (!meta) {\n    throw new Error(`Resource \"${resourceType}\" is not supported by this FHIR server`);\n  } // Check if any search parameters are available for this resource\n\n\n  if (!Array.isArray(meta.searchParam)) {\n    throw new Error(`No search parameters supported for \"${resourceType}\" on this FHIR server`);\n  } // This is a rare case but could happen in generic workflows\n\n\n  if (resourceType == \"Patient\" && meta.searchParam.find(x => x.name == \"_id\")) {\n    return \"_id\";\n  } // Now find the first possible parameter name\n\n\n  const out = settings_1.patientParams.find(p => meta.searchParam.find(x => x.name == p)); // If there is no match\n\n  if (!out) {\n    throw new Error(\"I don't know what param to use for \" + resourceType);\n  }\n\n  return out;\n}\n\nexports.getPatientParam = getPatientParam;\n/**\n * Resolves a reference to target window. It may also open new window or tab if\n * the `target = \"popup\"` or `target = \"_blank\"`.\n * @param target\n * @param width Only used when `target = \"popup\"`\n * @param height Only used when `target = \"popup\"`\n */\n\nasync function getTargetWindow(target, width = 800, height = 720) {\n  // The target can be a function that returns the target. This can be\n  // used to open a layer pop-up with an iframe and then return a reference\n  // to that iframe (or its name)\n  if (typeof target == \"function\") {\n    target = await target();\n  } // The target can be a window reference\n\n\n  if (target && typeof target == \"object\") {\n    return target;\n  } // At this point target must be a string\n\n\n  if (typeof target != \"string\") {\n    _debug(\"Invalid target type '%s'. Failing back to '_self'.\", typeof target);\n\n    return self;\n  } // Current window\n\n\n  if (target == \"_self\") {\n    return self;\n  } // The parent frame\n\n\n  if (target == \"_parent\") {\n    return parent;\n  } // The top window\n\n\n  if (target == \"_top\") {\n    return top;\n  } // New tab or window\n\n\n  if (target == \"_blank\") {\n    let error,\n        targetWindow = null;\n    ;\n\n    try {\n      targetWindow = window.open(\"\", \"SMARTAuthPopup\");\n\n      if (!targetWindow) {\n        throw new Error(\"Perhaps window.open was blocked\");\n      }\n    } catch (e) {\n      error = e;\n    }\n\n    if (!targetWindow) {\n      _debug(\"Cannot open window. Failing back to '_self'. %s\", error);\n\n      return self;\n    } else {\n      return targetWindow;\n    }\n  } // Popup window\n\n\n  if (target == \"popup\") {\n    let error,\n        targetWindow = null; // if (!targetWindow || targetWindow.closed) {\n\n    try {\n      targetWindow = window.open(\"\", \"SMARTAuthPopup\", [\"height=\" + height, \"width=\" + width, \"menubar=0\", \"resizable=1\", \"status=0\", \"top=\" + (screen.height - height) / 2, \"left=\" + (screen.width - width) / 2].join(\",\"));\n\n      if (!targetWindow) {\n        throw new Error(\"Perhaps the popup window was blocked\");\n      }\n    } catch (e) {\n      error = e;\n    }\n\n    if (!targetWindow) {\n      _debug(\"Cannot open window. Failing back to '_self'. %s\", error);\n\n      return self;\n    } else {\n      return targetWindow;\n    }\n  } // Frame or window by name\n\n\n  const winOrFrame = frames[target];\n\n  if (winOrFrame) {\n    return winOrFrame;\n  }\n\n  _debug(\"Unknown target '%s'. Failing back to '_self'.\", target);\n\n  return self;\n}\n\nexports.getTargetWindow = getTargetWindow;","map":{"version":3,"sources":["/Users/myoungseokjeong/Desktop/Masters/COMP3820_digital_health_software_project/Code/COMP3820-ISBAR/isbar-complex-react/node_modules/fhirclient/lib/lib.js"],"names":["Object","defineProperty","exports","value","HttpError_1","require","settings_1","debug","fetch","FHIRCLIENT_PURE","window","_debug","cache","units","cm","code","ensureNumerical","Error","kg","match","any","pq","checkResponse","resp","ok","humanizeError","responseToJSON","text","then","length","JSON","parse","request","url","options","assign","mode","headers","accept","res","type","get","getAndCache","requestOptions","force","process","env","NODE_ENV","Promise","resolve","fetchConformanceStatement","baseUrl","String","replace","catch","ex","msg","status","statusText","json","error","error_description","stringify","_","default","getPath","obj","path","trim","split","reduce","out","key","undefined","setPath","idx","arr","makeArray","arg","Array","isArray","absolute","randomString","strLength","charSet","result","len","push","charAt","Math","floor","random","join","jwtDecode","token","payload","atob","byCode","observations","property","ret","handleCodeableConcept","concept","observation","coding","forEach","o","resourceType","byCodes","bank","codes","filter","prev","concat","getPatientParam","conformance","resources","meta","find","r","searchParam","x","name","patientParams","p","getTargetWindow","target","width","height","self","parent","top","targetWindow","open","e","screen","winOrFrame","frames"],"mappings":"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","sourcesContent":["\"use strict\";\n/*\n * This file contains some shared functions. They are used by other modules, but\n * are defined here so that tests can import this library and test them.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst HttpError_1 = require(\"./HttpError\");\n\nconst settings_1 = require(\"./settings\");\n\nconst debug = require(\"debug\"); // $lab:coverage:off$\n// @ts-ignore\n\n\nconst {\n  fetch\n} = typeof FHIRCLIENT_PURE !== \"undefined\" ? window : require(\"cross-fetch\"); // $lab:coverage:on$\n\nconst _debug = debug(\"FHIR\");\n\nexports.debug = _debug;\n/**\n * The cache for the `getAndCache` function\n */\n\nconst cache = {};\n/**\n * A namespace with functions for converting between different measurement units\n */\n\nexports.units = {\n  cm({\n    code,\n    value\n  }) {\n    ensureNumerical({\n      code,\n      value\n    });\n    if (code == \"cm\") return value;\n    if (code == \"m\") return value * 100;\n    if (code == \"in\") return value * 2.54;\n    if (code == \"[in_us]\") return value * 2.54;\n    if (code == \"[in_i]\") return value * 2.54;\n    if (code == \"ft\") return value * 30.48;\n    if (code == \"[ft_us]\") return value * 30.48;\n    throw new Error(\"Unrecognized length unit: \" + code);\n  },\n\n  kg({\n    code,\n    value\n  }) {\n    ensureNumerical({\n      code,\n      value\n    });\n    if (code == \"kg\") return value;\n    if (code == \"g\") return value / 1000;\n    if (code.match(/lb/)) return value / 2.20462;\n    if (code.match(/oz/)) return value / 35.274;\n    throw new Error(\"Unrecognized weight unit: \" + code);\n  },\n\n  any(pq) {\n    ensureNumerical(pq);\n    return pq.value;\n  }\n\n};\n/**\n * Assertion function to guard arguments for `units` functions\n */\n\nfunction ensureNumerical({\n  value,\n  code\n}) {\n  if (typeof value !== \"number\") {\n    throw new Error(\"Found a non-numerical unit: \" + value + \" \" + code);\n  }\n}\n/**\n * Used in fetch Promise chains to reject if the \"ok\" property is not true\n */\n\n\nasync function checkResponse(resp) {\n  if (!resp.ok) {\n    throw await humanizeError(resp);\n  }\n\n  return resp;\n}\n\nexports.checkResponse = checkResponse;\n/**\n * Used in fetch Promise chains to return the JSON version of the response.\n * Note that `resp.json()` will throw on empty body so we use resp.text()\n * instead.\n */\n\nfunction responseToJSON(resp) {\n  return resp.text().then(text => text.length ? JSON.parse(text) : \"\");\n}\n\nexports.responseToJSON = responseToJSON;\n/**\n * This is our built-in request function. It does a few things by default\n * (unless told otherwise):\n * - Makes CORS requests\n * - Sets accept header to \"application/json\"\n * - Handles errors\n * - If the response is json return the json object\n * - If the response is text return the result text\n * - Otherwise return the response object on which we call stuff like `.blob()`\n */\n\nfunction request(url, options = {}) {\n  return fetch(url, Object.assign(Object.assign({\n    mode: \"cors\"\n  }, options), {\n    headers: Object.assign({\n      accept: \"application/json\"\n    }, options.headers)\n  })).then(checkResponse).then(res => {\n    const type = res.headers.get(\"Content-Type\") + \"\";\n\n    if (type.match(/\\bjson\\b/i)) {\n      return responseToJSON(res);\n    }\n\n    if (type.match(/^text\\//i)) {\n      return res.text();\n    }\n\n    return res;\n  });\n}\n\nexports.request = request;\n/**\n * Makes a request using `fetch` and stores the result in internal memory cache.\n * The cache is cleared when the page is unloaded.\n * @param url The URL to request\n * @param requestOptions Request options\n * @param force If true, reload from source and update the cache, even if it has\n * already been cached.\n */\n\nfunction getAndCache(url, requestOptions, force = process.env.NODE_ENV === \"test\") {\n  if (force || !cache[url]) {\n    cache[url] = request(url, requestOptions);\n    return cache[url];\n  }\n\n  return Promise.resolve(cache[url]);\n}\n\nexports.getAndCache = getAndCache;\n/**\n * Fetches the conformance statement from the given base URL.\n * Note that the result is cached in memory (until the page is reloaded in the\n * browser) because it might have to be re-used by the client\n * @param baseUrl The base URL of the FHIR server\n * @param [requestOptions] Any options passed to the fetch call\n */\n\nfunction fetchConformanceStatement(baseUrl = \"/\", requestOptions) {\n  const url = String(baseUrl).replace(/\\/*$/, \"/\") + \"metadata\";\n  return getAndCache(url, requestOptions).catch(ex => {\n    throw new Error(`Failed to fetch the conformance statement from \"${url}\". ${ex}`);\n  });\n}\n\nexports.fetchConformanceStatement = fetchConformanceStatement;\n/**\n * Given a response object, generates and throws detailed HttpError.\n * @param resp The `Response` object of a failed `fetch` request\n */\n\nasync function humanizeError(resp) {\n  let msg = `${resp.status} ${resp.statusText}\\nURL: ${resp.url}`;\n\n  try {\n    const type = resp.headers.get(\"Content-Type\") || \"text/plain\";\n\n    if (type.match(/\\bjson\\b/i)) {\n      const json = await resp.json();\n\n      if (json.error) {\n        msg += \"\\n\" + json.error;\n\n        if (json.error_description) {\n          msg += \": \" + json.error_description;\n        }\n      } else {\n        msg += \"\\n\\n\" + JSON.stringify(json, null, 4);\n      }\n    }\n\n    if (type.match(/^text\\//i)) {\n      const text = await resp.text();\n\n      if (text) {\n        msg += \"\\n\\n\" + text;\n      }\n    }\n  } catch (_) {// ignore\n  }\n\n  throw new HttpError_1.default(msg, resp.status, resp.statusText);\n}\n\nexports.humanizeError = humanizeError;\n/**\n * Walks through an object (or array) and returns the value found at the\n * provided path. This function is very simple so it intentionally does not\n * support any argument polymorphism, meaning that the path can only be a\n * dot-separated string. If the path is invalid returns undefined.\n * @param obj The object (or Array) to walk through\n * @param path The path (eg. \"a.b.4.c\")\n * @returns {*} Whatever is found in the path or undefined\n */\n\nfunction getPath(obj, path = \"\") {\n  path = path.trim();\n\n  if (!path) {\n    return obj;\n  }\n\n  return path.split(\".\").reduce((out, key) => out ? out[key] : undefined, obj);\n}\n\nexports.getPath = getPath;\n/**\n * Like getPath, but if the node is found, its value is set to @value\n * @param obj   The object (or Array) to walk through\n * @param path  The path (eg. \"a.b.4.c\")\n * @param value The value to set\n * @returns The modified object\n */\n\nfunction setPath(obj, path, value) {\n  path.trim().split(\".\").reduce((out, key, idx, arr) => {\n    if (out && idx === arr.length - 1) {\n      out[key] = value;\n    } else {\n      return out ? out[key] : undefined;\n    }\n  }, obj);\n  return obj;\n}\n\nexports.setPath = setPath;\n/**\n * If the argument is an array returns it as is. Otherwise puts it in an array\n * (`[arg]`) and returns the result\n * @param arg The element to test and possibly convert to array\n * @category Utility\n */\n\nfunction makeArray(arg) {\n  if (Array.isArray(arg)) {\n    return arg;\n  }\n\n  return [arg];\n}\n\nexports.makeArray = makeArray;\n/**\n * Given a path, converts it to absolute url based on the `baseUrl`. If baseUrl\n * is not provided, the result would be a rooted path (one that starts with `/`).\n * @param path The path to convert\n * @param baseUrl The base URL\n */\n\nfunction absolute(path, baseUrl) {\n  if (path.match(/^http/)) return path;\n  if (path.match(/^urn/)) return path;\n  return String(baseUrl || \"\").replace(/\\/+$/, \"\") + \"/\" + path.replace(/^\\/+/, \"\");\n}\n\nexports.absolute = absolute;\n/**\n * Generates random strings. By default this returns random 8 characters long\n * alphanumeric strings.\n * @param strLength The length of the output string. Defaults to 8.\n * @param charSet A string containing all the possible characters.\n *     Defaults to all the upper and lower-case letters plus digits.\n * @category Utility\n */\n\nfunction randomString(strLength = 8, charSet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\") {\n  const result = [];\n  const len = charSet.length;\n\n  while (strLength--) {\n    result.push(charSet.charAt(Math.floor(Math.random() * len)));\n  }\n\n  return result.join(\"\");\n}\n\nexports.randomString = randomString;\n/**\n * Decodes a JWT token and returns it's body.\n * @param token The token to read\n * @param env An `Adapter` or any other object that has an `atob` method\n * @category Utility\n */\n\nfunction jwtDecode(token, env) {\n  const payload = token.split(\".\")[1];\n  return JSON.parse(env.atob(payload));\n}\n\nexports.jwtDecode = jwtDecode;\n/**\n * Groups the observations by code. Returns a map that will look like:\n * ```js\n * const map = client.byCodes(observations, \"code\");\n * // map = {\n * //     \"55284-4\": [ observation1, observation2 ],\n * //     \"6082-2\": [ observation3 ]\n * // }\n * ```\n * @param observations Array of observations\n * @param property The name of a CodeableConcept property to group by\n */\n\nfunction byCode(observations, property) {\n  const ret = {};\n\n  function handleCodeableConcept(concept, observation) {\n    if (concept && Array.isArray(concept.coding)) {\n      concept.coding.forEach(({\n        code\n      }) => {\n        if (code) {\n          ret[code] = ret[code] || [];\n          ret[code].push(observation);\n        }\n      });\n    }\n  }\n\n  makeArray(observations).forEach(o => {\n    if (o.resourceType === \"Observation\" && o[property]) {\n      if (Array.isArray(o[property])) {\n        o[property].forEach(concept => handleCodeableConcept(concept, o));\n      } else {\n        handleCodeableConcept(o[property], o);\n      }\n    }\n  });\n  return ret;\n}\n\nexports.byCode = byCode;\n/**\n * First groups the observations by code using `byCode`. Then returns a function\n * that accepts codes as arguments and will return a flat array of observations\n * having that codes. Example:\n * ```js\n * const filter = client.byCodes(observations, \"category\");\n * filter(\"laboratory\") // => [ observation1, observation2 ]\n * filter(\"vital-signs\") // => [ observation3 ]\n * filter(\"laboratory\", \"vital-signs\") // => [ observation1, observation2, observation3 ]\n * ```\n * @param observations Array of observations\n * @param property The name of a CodeableConcept property to group by\n */\n\nfunction byCodes(observations, property) {\n  const bank = byCode(observations, property);\n  return (...codes) => codes.filter(code => code + \"\" in bank).reduce((prev, code) => prev.concat(bank[code + \"\"]), []);\n}\n\nexports.byCodes = byCodes;\n/**\n * Given a conformance statement and a resource type, returns the name of the\n * URL parameter that can be used to scope the resource type by patient ID.\n */\n\nfunction getPatientParam(conformance, resourceType) {\n  // Find what resources are supported by this server\n  const resources = getPath(conformance, \"rest.0.resource\") || []; // Check if this resource is supported\n\n  const meta = resources.find(r => r.type === resourceType);\n\n  if (!meta) {\n    throw new Error(`Resource \"${resourceType}\" is not supported by this FHIR server`);\n  } // Check if any search parameters are available for this resource\n\n\n  if (!Array.isArray(meta.searchParam)) {\n    throw new Error(`No search parameters supported for \"${resourceType}\" on this FHIR server`);\n  } // This is a rare case but could happen in generic workflows\n\n\n  if (resourceType == \"Patient\" && meta.searchParam.find(x => x.name == \"_id\")) {\n    return \"_id\";\n  } // Now find the first possible parameter name\n\n\n  const out = settings_1.patientParams.find(p => meta.searchParam.find(x => x.name == p)); // If there is no match\n\n  if (!out) {\n    throw new Error(\"I don't know what param to use for \" + resourceType);\n  }\n\n  return out;\n}\n\nexports.getPatientParam = getPatientParam;\n/**\n * Resolves a reference to target window. It may also open new window or tab if\n * the `target = \"popup\"` or `target = \"_blank\"`.\n * @param target\n * @param width Only used when `target = \"popup\"`\n * @param height Only used when `target = \"popup\"`\n */\n\nasync function getTargetWindow(target, width = 800, height = 720) {\n  // The target can be a function that returns the target. This can be\n  // used to open a layer pop-up with an iframe and then return a reference\n  // to that iframe (or its name)\n  if (typeof target == \"function\") {\n    target = await target();\n  } // The target can be a window reference\n\n\n  if (target && typeof target == \"object\") {\n    return target;\n  } // At this point target must be a string\n\n\n  if (typeof target != \"string\") {\n    _debug(\"Invalid target type '%s'. Failing back to '_self'.\", typeof target);\n\n    return self;\n  } // Current window\n\n\n  if (target == \"_self\") {\n    return self;\n  } // The parent frame\n\n\n  if (target == \"_parent\") {\n    return parent;\n  } // The top window\n\n\n  if (target == \"_top\") {\n    return top;\n  } // New tab or window\n\n\n  if (target == \"_blank\") {\n    let error,\n        targetWindow = null;\n    ;\n\n    try {\n      targetWindow = window.open(\"\", \"SMARTAuthPopup\");\n\n      if (!targetWindow) {\n        throw new Error(\"Perhaps window.open was blocked\");\n      }\n    } catch (e) {\n      error = e;\n    }\n\n    if (!targetWindow) {\n      _debug(\"Cannot open window. Failing back to '_self'. %s\", error);\n\n      return self;\n    } else {\n      return targetWindow;\n    }\n  } // Popup window\n\n\n  if (target == \"popup\") {\n    let error,\n        targetWindow = null; // if (!targetWindow || targetWindow.closed) {\n\n    try {\n      targetWindow = window.open(\"\", \"SMARTAuthPopup\", [\"height=\" + height, \"width=\" + width, \"menubar=0\", \"resizable=1\", \"status=0\", \"top=\" + (screen.height - height) / 2, \"left=\" + (screen.width - width) / 2].join(\",\"));\n\n      if (!targetWindow) {\n        throw new Error(\"Perhaps the popup window was blocked\");\n      }\n    } catch (e) {\n      error = e;\n    }\n\n    if (!targetWindow) {\n      _debug(\"Cannot open window. Failing back to '_self'. %s\", error);\n\n      return self;\n    } else {\n      return targetWindow;\n    }\n  } // Frame or window by name\n\n\n  const winOrFrame = frames[target];\n\n  if (winOrFrame) {\n    return winOrFrame;\n  }\n\n  _debug(\"Unknown target '%s'. Failing back to '_self'.\", target);\n\n  return self;\n}\n\nexports.getTargetWindow = getTargetWindow;"]},"metadata":{},"sourceType":"script"}