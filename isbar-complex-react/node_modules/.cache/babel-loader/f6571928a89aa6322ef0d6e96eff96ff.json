{"ast":null,"code":"var _jsxFileName = \"/Users/myoungseokjeong/Desktop/Masters/COMP3820_digital_health_software_project/Code/COMP3820-ISBAR/isbar-simple-react/src/IsbarSimpleInputField.js\";\nimport React from \"react\";\nimport TextInputField from \"./TextInputField\";\nimport { IsbarClientContext } from \"./IsbarFhirClient\";\nimport { isbarQuestionnaire } from \"./QuestionnaireTemplates\"; // Class for the input field group.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class IsbarSimpleInputField extends React.Component {\n  // the this.context.client is the client object!!!\n  constructor(props) {\n    super(props);\n    this.state = {\n      // used true if data is loaded\n      loaded: false,\n      error: null,\n      // true if questionnaireResponse exists\n      responseExist: false,\n      patient: null,\n      questionnaire: null,\n      questionnaireResponse: null,\n      // turns true if it's isobar\n      isIsobar: false // would be good if we have a array of question-answer pair.\n\n    };\n  }\n\n  componentDidMount() {\n    // load client from the client context\n    const client = this.context.client; // Promise to set the patient... for?\n    //const loadPatient = client.patient.read().then(patient => this.setState({patient: patient}))\n    // Promise to load/create questionnaire\n\n    const loadQuestionnaire = client.request(\"Questionnaire?name=\" + isbarQuestionnaire.name).then(response => {\n      // Check if questionnaire exist or not\n      console.log(\"Questionnaires:\");\n      console.log(response);\n\n      if (response.total === 0) {\n        // there are no questionnaire object - create one\n        return client.create(isbarQuestionnaire);\n      } else {\n        // return the existing questionnaire to be saved\n        return response.entry[0].resource;\n      }\n    }).then(result => {\n      // save questionnaire, request questionnaireResponse\n      this.setState({\n        questionnaire: result\n      });\n      return client.request(\"QuestionnaireResponse?source=Patient/\" + this.context.client.patient.id);\n    }).then(response => {\n      // Check if there's an existing questionnaireResponse\n      console.log(\"Questionnaire Responses:\");\n      console.log(response);\n      var qResponse;\n\n      if (response.total > 0) {\n        if (response.entry.some(element => {\n          qResponse = element.resource;\n          return this.checkExistingResponse(element.resource);\n        })) {\n          // response that fulfills the criteria exists\n          console.log(\"Selected Response\"); //console.log(qResponse)\n\n          console.log(this.newQuestionnaireResponse()); //return client.create(this.newQuestionnaireResponse());\n\n          return qResponse;\n        }\n      } // no isbar responses - create one\n\n\n      console.log(\"No ISBAR questionnaire response from this patient. Creating one..\");\n      return client.create(this.newQuestionnaireResponse());\n    }).then(result => {\n      console.log(\"Questionnaire response result\");\n      console.log(result); // save the response object, finish loading\n\n      this.setState({\n        questionnaireResponse: result,\n        loaded: true,\n        error: null\n      });\n    }).catch(error => {\n      console.error(error);\n      this.setState({\n        error,\n        loaded: false\n      });\n    });\n  } // function to change the form to isobar form.\n\n\n  changeToIsobar() {} // check if the given resource is QuestionnaireResponse for isbar\n  // still need some check to see if it is actually for isbar\n\n\n  checkExistingResponse(resource) {\n    if (resource.source.reference === \"Patient/\" + this.context.client.patient.id && resource.questionnaire === \"Questionnaire/\" + this.state.questionnaire.id) {\n      return true;\n    }\n\n    return false;\n  } // function to send update request\n\n\n  updateResponse() {\n    console.log(\"Updated response: \" + JSON.stringify(this.state.questionnaireResponse));\n    this.context.client.update(this.state.questionnaireResponse).then(console.log).catch(console.error);\n  } // create new empty questionnaire response resource with this patient.\n  // returns the questionnaire object made.\n\n\n  newQuestionnaireResponse() {\n    // questionnaire response resource\n    var qResponse = {\n      \"resourceType\": \"QuestionnaireResponse\",\n      \"text\": {\n        \"name\": \"isbar-simple-response\"\n      },\n      // maybe later when we sort out the thingy\n      // Reference the questionnaire\n      \"questionnaire\": \"Questionnaire/\" + this.state.questionnaire.id,\n      \"status\": \"in-progress\",\n      \"source\": {\n        // refer to current patient\n        \"reference\": \"Patient/\" + this.context.client.patient.id\n      },\n      \"item\": [{\n        \"linkId\": \"1\",\n        \"text\": \"I:Identify\",\n        \"answer\": [{\n          \"valueString\": \"\"\n        }]\n      }, {\n        \"linkId\": \"2\",\n        \"text\": \"S:Situation\",\n        \"answer\": [{\n          \"valueString\": \"\"\n        }]\n      }, {\n        \"linkId\": \"3\",\n        \"text\": \"O:Observation\",\n        \"answer\": [{\n          \"valueString\": \"\"\n        }]\n      }, {\n        \"linkId\": \"4\",\n        \"text\": \"B:Background\",\n        \"answer\": [{\n          \"valueString\": \"\"\n        }]\n      }, {\n        \"linkId\": \"5\",\n        \"text\": \"A:Assessment\",\n        \"answer\": [{\n          \"valueString\": \"\"\n        }]\n      }, {\n        \"linkId\": \"6\",\n        \"text\": \"R:Recommendation\",\n        \"answer\": [{\n          \"valueString\": \"\"\n        }]\n      }]\n    };\n    return qResponse;\n  } // this is the function for changing value\n  // changes answer string in the questionnaireresponse object with given index\n  // updates questionnaireresponse state\n\n\n  handleChange(event, index) {\n    var response = this.state.questionnaireResponse;\n\n    if (response.item[index].hasOwnProperty('answer')) {\n      response.item[index].answer[0].valueString = event.target.value;\n    } else {\n      response.item[index].answer = [{\n        \"valueString\": event.target.value\n      }];\n    }\n\n    this.setState({\n      questionnaireResponse: response\n    });\n  } // Load the text fields after the questionnaire and questionnaire responses are loaded.\n\n\n  render() {\n    // questionnaire response object\n    if (this.state.loaded) {\n      if (this.state.isIsobar) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"isbar-input-fields\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 21\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(TextInputField, {\n            index: \"0\",\n            formID: \"introduction\",\n            label: \"I\",\n            placeholder: \"Introduction\",\n            item: this.state.questionnaireResponse.item[0],\n            handleChange: this.handleChange.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            index: \"1\",\n            formID: \"situation\",\n            label: \"S\",\n            placeholder: \"Situation\",\n            item: this.state.questionnaireResponse.item[1],\n            handleChange: this.handleChange.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            index: \"3\",\n            formID: \"background\",\n            label: \"B\",\n            placeholder: \"Background\",\n            item: this.state.questionnaireResponse.item[3],\n            handleChange: this.handleChange.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            index: \"4\",\n            formID: \"assessment\",\n            label: \"A\",\n            placeholder: \"Assessment\",\n            item: this.state.questionnaireResponse.item[4],\n            handleChange: this.handleChange.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInputField, {\n            index: \"5\",\n            formID: \"recommendation\",\n            label: \"R\",\n            placeholder: \"Recommendation\",\n            item: this.state.questionnaireResponse.item[5],\n            handleChange: this.handleChange.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"isbar-save\",\n            onClick: () => this.updateResponse(),\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }, this);\n      }\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"isbar-loading\",\n        children: \"Loading the ISBAR form..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\nIsbarSimpleInputField.contextType = IsbarClientContext;","map":{"version":3,"sources":["/Users/myoungseokjeong/Desktop/Masters/COMP3820_digital_health_software_project/Code/COMP3820-ISBAR/isbar-simple-react/src/IsbarSimpleInputField.js"],"names":["React","TextInputField","IsbarClientContext","isbarQuestionnaire","IsbarSimpleInputField","Component","constructor","props","state","loaded","error","responseExist","patient","questionnaire","questionnaireResponse","isIsobar","componentDidMount","client","context","loadQuestionnaire","request","name","then","response","console","log","total","create","entry","resource","result","setState","id","qResponse","some","element","checkExistingResponse","newQuestionnaireResponse","catch","changeToIsobar","source","reference","updateResponse","JSON","stringify","update","handleChange","event","index","item","hasOwnProperty","answer","valueString","target","value","render","bind","contextType"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport TextInputField from \"./TextInputField\";\nimport { IsbarClientContext } from \"./IsbarFhirClient\";\nimport { isbarQuestionnaire } from \"./QuestionnaireTemplates\";\n\n// Class for the input field group.\nexport class IsbarSimpleInputField extends React.Component {\n\n    // the this.context.client is the client object!!!\n    static contextType = IsbarClientContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // used true if data is loaded\n            loaded: false,\n            error: null,\n            // true if questionnaireResponse exists\n            responseExist: false,\n\n            patient: null,\n            questionnaire: null,\n            questionnaireResponse: null,\n            // turns true if it's isobar\n            isIsobar: false,\n            // would be good if we have a array of question-answer pair.\n        };\n    }\n\n    componentDidMount() {\n\n        // load client from the client context\n        const client = this.context.client;\n        \n        // Promise to set the patient... for?\n        //const loadPatient = client.patient.read().then(patient => this.setState({patient: patient}))\n\n        // Promise to load/create questionnaire\n        const loadQuestionnaire = client.request(\"Questionnaire?name=\" + isbarQuestionnaire.name)\n        .then(response => {\n            // Check if questionnaire exist or not\n\n            console.log(\"Questionnaires:\");\n            console.log(response);\n            if (response.total === 0) {\n                // there are no questionnaire object - create one\n                return client.create(isbarQuestionnaire);\n            } else {\n                // return the existing questionnaire to be saved\n                return response.entry[0].resource;\n            }\n        }).then(result => {\n            // save questionnaire, request questionnaireResponse\n\n            this.setState({ questionnaire: result });\n            return client.request(\"QuestionnaireResponse?source=Patient/\" + this.context.client.patient.id)\n        }).then(response => {\n            // Check if there's an existing questionnaireResponse\n\n            console.log(\"Questionnaire Responses:\");\n            console.log(response);\n            var qResponse\n\n            if (response.total > 0) {\n                if(\n                    response.entry.some(element => {\n                        qResponse = element.resource;\n                        return this.checkExistingResponse(element.resource);\n                    })\n                ){\n                    // response that fulfills the criteria exists\n                    console.log(\"Selected Response\")\n                    //console.log(qResponse)\n                    console.log(this.newQuestionnaireResponse());\n                    //return client.create(this.newQuestionnaireResponse());\n                    return qResponse\n                } \n            }\n            // no isbar responses - create one\n            console.log(\"No ISBAR questionnaire response from this patient. Creating one..\")\n            return client.create(this.newQuestionnaireResponse());\n        }).then(result => {\n\n            console.log(\"Questionnaire response result\");\n            console.log(result);\n            // save the response object, finish loading\n            this.setState({ \n                questionnaireResponse: result,\n                loaded:true,\n                error:null\n             });\n        }).catch(error => {\n\n            console.error(error);\n            this.setState({ error, loaded: false });\n        });\n    }\n\n    // function to change the form to isobar form.\n    changeToIsobar() {\n\n    }\n    \n    // check if the given resource is QuestionnaireResponse for isbar\n    // still need some check to see if it is actually for isbar\n    checkExistingResponse(resource){\n\n        if(resource.source.reference === \"Patient/\" + this.context.client.patient.id &&\n            resource.questionnaire === \"Questionnaire/\" + this.state.questionnaire.id\n        ){\n            return true\n        }\n        return false\n    }\n\n    // function to send update request\n    updateResponse(){\n        console.log(\"Updated response: \" + JSON.stringify(this.state.questionnaireResponse))\n        this.context.client.update(this.state.questionnaireResponse)\n        .then(console.log)\n        .catch(console.error)\n    }\n\n    // create new empty questionnaire response resource with this patient.\n    // returns the questionnaire object made.\n    newQuestionnaireResponse() {\n\n        // questionnaire response resource\n        var qResponse = {\n            \"resourceType\": \"QuestionnaireResponse\",\n            \"text\": { \"name\": \"isbar-simple-response\" },\n            // maybe later when we sort out the thingy\n            // Reference the questionnaire\n            \"questionnaire\": \"Questionnaire/\" + this.state.questionnaire.id,\n            \"status\": \"in-progress\",\n            \"source\": {\n                // refer to current patient\n                \"reference\": \"Patient/\" + this.context.client.patient.id\n            },\n            \"item\": [\n                {\n                    \"linkId\": \"1\",\n                    \"text\": \"I:Identify\",\n                    \"answer\": [\n                        {\n                            \"valueString\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"linkId\": \"2\",\n                    \"text\": \"S:Situation\",\n                    \"answer\": [\n                        {\n                            \"valueString\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"linkId\": \"3\",\n                    \"text\": \"O:Observation\",\n                    \"answer\": [\n                        {\n                            \"valueString\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"linkId\": \"4\",\n                    \"text\": \"B:Background\",\n                    \"answer\": [\n                        {\n                            \"valueString\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"linkId\": \"5\",\n                    \"text\": \"A:Assessment\",\n                    \"answer\": [\n                        {\n                            \"valueString\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"linkId\": \"6\",\n                    \"text\": \"R:Recommendation\",\n                    \"answer\": [\n                        {\n                            \"valueString\": \"\"\n                        }\n                    ]\n                },\n            ]\n        }\n\n        return qResponse;\n    }\n\n    // this is the function for changing value\n    // changes answer string in the questionnaireresponse object with given index\n    // updates questionnaireresponse state\n    handleChange(event, index) {\n        \n        var response = this.state.questionnaireResponse;\n\n        if(response.item[index].hasOwnProperty('answer')){\n            response.item[index].answer[0].valueString = event.target.value\n        } else{\n            response.item[index].answer = [{\n                \"valueString\": event.target.value\n            }]\n        }\n        \n        this.setState({questionnaireResponse: response})\n    }\n\n    // Load the text fields after the questionnaire and questionnaire responses are loaded.\n    render() {\n        \n        // questionnaire response object\n\n        if (this.state.loaded) {\n            if (this.state.isIsobar) {\n                return (\n                    <div className=\"isbar-input-fields\">\n                        {/* <TextInputField label=\"I\" heading=\"Heading\" value={this.state.questionnaireResponse} />\n                        <TextInputField label=\"S\" heading=\"Heading\" value=\"Loading....\" />\n                        <TextInputField label=\"O\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"B\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"A\" heading=\"Heading\" value=\"Loading...\" />\n                        <TextInputField label=\"R\" heading=\"Heading\" value=\"Loading...\" /> */}\n\n                    </div>\n                )\n            } else {\n                return (\n                    <div className=\"container\">\n                        \n                        <TextInputField\n                            index=\"0\"\n                            formID=\"introduction\"\n                            label=\"I\"\n                            placeholder=\"Introduction\"\n                            item={this.state.questionnaireResponse.item[0]}\n                            handleChange={this.handleChange.bind(this)}\n                        />\n                        <TextInputField\n                            index=\"1\"\n                            formID=\"situation\"\n                            label=\"S\"\n                            placeholder=\"Situation\"\n                            item={this.state.questionnaireResponse.item[1]}\n                            handleChange={this.handleChange.bind(this)}\n                        />\n                        <TextInputField\n                            index=\"3\"\n                            formID=\"background\"\n                            label=\"B\"\n                            placeholder=\"Background\"\n                            item={this.state.questionnaireResponse.item[3]}\n                            handleChange={this.handleChange.bind(this)}\n                        />\n                        <TextInputField\n                            index=\"4\"\n                            formID=\"assessment\"\n                            label=\"A\"\n                            placeholder=\"Assessment\"\n                            item={this.state.questionnaireResponse.item[4]}\n                            handleChange={this.handleChange.bind(this)}\n                        />\n                        <TextInputField\n                            index=\"5\"\n                            formID=\"recommendation\"\n                            label=\"R\"\n                            placeholder=\"Recommendation\"\n                            item={this.state.questionnaireResponse.item[5]}\n                            handleChange={this.handleChange.bind(this)}\n                        />\n                        <button \n                        className=\"isbar-save\"\n                        onClick={() => this.updateResponse()}>\n                            Save\n                        </button>\n                        \n                    </div>\n                )\n            }\n        } else {\n            return (\n                <div className=\"isbar-loading\">\n                    Loading the ISBAR form..\n                </div>\n            )\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}