{"ast":null,"code":"var _jsxFileName = \"/Users/sophia/COMP3820-ISBAR/src/IsbarFhirClient.js\";\n// This is the file to deal with fhir client\n// Client context is created and updated.\nimport React from \"react\";\nimport { client, oauth2 as SMART } from \"fhirclient\"; // React client context so it is accessible in differernt parts of code.\n// by exporting, it should be accessible from various part of the code.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const IsbarClientContext = /*#__PURE__*/React.createContext({});\nexport class IsbarClientProvider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      client: null,\n      // client object\n      error: null,\n      // error message\n      simpleForms: null,\n      // simple isbar forms (questionnaireResponses)\n      complexForms: null // complex isbar forms ()\n\n    };\n  }\n\n  componentDidMount() {\n    // Wait until the SMART client is ready, then save the client object as its state.\n    SMART.ready().then(client => this.setState({\n      client\n    }), error => this.setState({\n      error\n    })); // Load the relevant resources\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // When the client is not loaded, it displays authorizing message.\n      // Once the client is loaded, display the child components.\n      _jsxDEV(IsbarClientContext.Provider, {\n        value: this.state || {},\n        children: /*#__PURE__*/_jsxDEV(IsbarClientContext.Consumer, {\n          children: ({\n            client,\n            error\n          }) => {\n            console.log(\"Client\");\n            console.log(client); // any error that SMART.ready() may have been rejected with\n\n            if (error) {\n              return /*#__PURE__*/_jsxDEV(\"pre\", {\n                children: error.stack\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 36\n              }, this);\n            } // if client is already available render the subtree (patient and input in this case.)\n\n\n            if (client) {\n              return this.props.children;\n            } // client is undefined until SMART.ready() is fulfilled. show loading message\n\n\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"loading-container\",\n              children: \"Launching the ISBAR handover form..\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this)\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/sophia/COMP3820-ISBAR/src/IsbarFhirClient.js"],"names":["React","client","oauth2","SMART","IsbarClientContext","createContext","IsbarClientProvider","Component","constructor","props","state","error","simpleForms","complexForms","componentDidMount","ready","then","setState","render","console","log","stack","children"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,MAAM,IAAIC,KAA3B,QAAwC,YAAxC,C,CAEA;AACA;;;AACA,OAAO,MAAMC,kBAAkB,gBAAGJ,KAAK,CAACK,aAAN,CAAoB,EAApB,CAA3B;AAEP,OAAO,MAAMC,mBAAN,SAAkCN,KAAK,CAACO,SAAxC,CAAkD;AACrDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAETT,MAAAA,MAAM,EAAE,IAFC;AAEK;AACdU,MAAAA,KAAK,EAAE,IAHE;AAGI;AACbC,MAAAA,WAAW,EAAE,IAJJ;AAIU;AACnBC,MAAAA,YAAY,EAAE,IALL,CAKU;;AALV,KAAb;AAOH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB;AACAX,IAAAA,KAAK,CAACY,KAAN,GAAcC,IAAd,CACKf,MAAD,IAAY,KAAKgB,QAAL,CAAc;AAAEhB,MAAAA;AAAF,KAAd,CADhB,EAEKU,KAAD,IAAW,KAAKM,QAAL,CAAc;AAAEN,MAAAA;AAAF,KAAd,CAFf,EAFgB,CAMhB;AACH;;AAEDO,EAAAA,MAAM,GAAG;AAEL;AAAA;AACI;AACA;AACA,cAAC,kBAAD,CAAoB,QAApB;AAA6B,QAAA,KAAK,EAAE,KAAKR,KAAL,IAAc,EAAlD;AAAA,+BACI,QAAC,kBAAD,CAAoB,QAApB;AAAA,oBACK,CAAC;AAAET,YAAAA,MAAF;AAAUU,YAAAA;AAAV,WAAD,KAAuB;AACpBQ,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAYnB,MAAZ,EAFoB,CAGpB;;AACA,gBAAIU,KAAJ,EAAW;AACP,kCAAO;AAAA,0BAAMA,KAAK,CAACU;AAAZ;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH,aANmB,CAQpB;;;AACA,gBAAIpB,MAAJ,EAAY;AAER,qBAAO,KAAKQ,KAAL,CAAWa,QAAlB;AACH,aAZmB,CAapB;;;AACA,gCACI;AAAK,cAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ;AAKH;AApBL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAHJ;AA4BH;;AAnDoD","sourcesContent":["// This is the file to deal with fhir client\n// Client context is created and updated.\n\nimport React from \"react\";\nimport { client, oauth2 as SMART } from \"fhirclient\";\n\n// React client context so it is accessible in differernt parts of code.\n// by exporting, it should be accessible from various part of the code.\nexport const IsbarClientContext = React.createContext({});\n\nexport class IsbarClientProvider extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            \n            client: null, // client object\n            error: null, // error message\n            simpleForms: null, // simple isbar forms (questionnaireResponses)\n            complexForms: null // complex isbar forms ()\n        }\n    }\n\n    componentDidMount() {\n        // Wait until the SMART client is ready, then save the client object as its state.\n        SMART.ready().then(\n            (client) => this.setState({ client }),\n            (error) => this.setState({ error })\n        )\n        // Load the relevant resources\n    }\n\n    render() {\n\n        return (\n            // When the client is not loaded, it displays authorizing message.\n            // Once the client is loaded, display the child components.\n            <IsbarClientContext.Provider value={this.state || {}}>\n                <IsbarClientContext.Consumer>\n                    {({ client, error }) => {\n                        console.log(\"Client\");\n                        console.log(client);\n                        // any error that SMART.ready() may have been rejected with\n                        if (error) {\n                            return <pre>{error.stack}</pre>;\n                        }\n\n                        // if client is already available render the subtree (patient and input in this case.)\n                        if (client) {\n\n                            return this.props.children;\n                        }\n                        // client is undefined until SMART.ready() is fulfilled. show loading message\n                        return (\n                            <div className=\"loading-container\">\n                                Launching the ISBAR handover form..\n                            </div>\n                        )\n                    }}\n                </IsbarClientContext.Consumer>\n            </IsbarClientContext.Provider>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}