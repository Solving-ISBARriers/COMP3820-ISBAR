{"ast":null,"code":"var _jsxFileName = \"/Users/sophia/COMP3820-ISBAR/src/Home.js\";\n// Main class for the main screen. Contains everything.\nimport React from \"react\";\nimport { IsbarClientProvider } from \"./IsbarFhirClient\";\nimport { IsbarSimpleApp } from \"./app-simple/IsbarSimpleApp\";\nimport { IsbarComplexApp } from \"./app-complex/IsbarComplexApp\";\nimport { IsbarComplexDevelopment } from \"./app-complex/IsbarComplexDevelopment\";\nimport { IsbarClientContext } from \"./IsbarFhirClient\";\nimport { Stack, Box, Container, Accordion, AccordionSummary, Typography, Button, AccordionDetails } from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport { SimpleHistory } from \"./SimpleHistory\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Home extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(IsbarClientProvider, {\n      children: /*#__PURE__*/_jsxDEV(AppController, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this);\n  }\n\n} // this component loads and displays the questionnaireResponse\n\nclass AppController extends React.Component {\n  // include client \n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n      isMenu: true,\n      isSimple: true,\n      questionnaireID: null,\n      simpleResponses: null,\n      createNew: false,\n      // id of current simple form\n      simpleFormID: null\n    };\n    this.editSimpleForm = this.editSimpleForm.bind(this);\n  }\n\n  componentDidMount() {\n    // Load questionnaire and simple isbar forms for this patient\n    const loadSimple = this.loadQuestionnaireID() // .then(() => this.createSimpleIsbar())\n    .then(res => this.loadSimpleIsbars(res)).then(() => this.setState({\n      loaded: true\n    })); // this.context.client.request(\"Practitioner/e443ac58-8ece-4385-8d55-775c1b8f3a37\").then(console.log)\n    // wait till all promises resolved\n\n    Promise.all([loadSimple]).then(() => console.log(\"all loaded\"));\n  }\n\n  backToMenu() {\n    // change the statte to come back to menu, and start loading\n    this.setState({\n      isMenu: true,\n      loaded: false\n    });\n    this.loadSimpleIsbars(this.state.questionnaireID).then(() => this.setState({\n      loaded: true\n    }));\n  } // Returns a promise that loads questionnaire ID using questionnaire template\n  // updates the state for questionnaire id\n  // the promise resolves to questionnaire id\n\n\n  loadQuestionnaireID() {\n    // make server calls \n    return this.context.client.request(\"Questionnaire?name=\" + isbarQuestionnaire.name).then(response => {\n      if (response.total === 0) {\n        // there are no questionnaire object - create one\n        return this.context.client.create(isbarQuestionnaire);\n      } else {\n        // return the existing questionnaire to be saved\n        return response.entry[0].resource;\n      }\n    }).then(result => {\n      // console.log(result.id)\n      // save the questionnaire ID in current component state\n      this.setState({\n        questionnaireID: result.id\n      }); // return the questionnaire id. This allows response searching without\n      // having to wait for setState to be executed\n\n      return result.id;\n    }).catch(console.error);\n  } // Returns a promise for loading simple isbar forms given questionnaire id.\n  // The promise resolves to the bundle returned from the server\n\n\n  loadSimpleIsbars(questionnaireID) {\n    return this.context.client.request( // currently, retrieves all responses about this patient\n    \"QuestionnaireResponse?questionnaire=\" + questionnaireID + \"&patient=Patient/\" + this.context.client.patient.id, // resolves references connected to questionnaire\n    // this was not used because it caused corruption, and the data had to be loaded again.\n    {\n      resolveReferences: [\"author\"]\n    }).then(result => {\n      // console.log(result)\n      // console.log(questionnaireID)\n      this.setState({\n        simpleResponses: result\n      }); // console.log(result)\n\n      return result;\n    }).catch(console.error);\n  } // opens existing form to edit. id is the questionnaireResponse id.\n\n\n  editSimpleForm(id) {\n    // the simple form should be passed as a prop to child object?\n    const response = this.state.simpleResponses.entry.filter(element => element.resource.id === id);\n    console.log(response);\n    console.log(response[0].resource.id); // search the server for questionnaireResponse with same id\n    // The resource is retrieved again rather than being set from the bundle\n    // because bundle contains resolved references, it results in corruption\n\n    this.setState({\n      simpleFormID: response[0].resource.id,\n      isMenu: false,\n      isSimple: true,\n      createNew: false\n    });\n  } // What a mess! requires cleaning..\n\n\n  render() {\n    if (this.state.loaded && this.state.isMenu) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            padding: '3%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            sx: {\n              width: '100%',\n              textAlign: 'center',\n              fontSize: '30px'\n            },\n            children: \"ISBAR Handover Form\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Stack, {\n            spacing: 2,\n            sx: {},\n            children: /*#__PURE__*/_jsxDEV(Accordion, {\n              defaultExpanded: false,\n              children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n                expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 49\n                }, this),\n                \"aria-controls\": \"panel1bh-content\",\n                id: \"panel1bh-header\",\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  sx: {\n                    width: '70%',\n                    flexShrink: 0\n                  },\n                  children: \"Simple ISBAR handover forms\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 150,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: () => this.setState({\n                    createNew: true,\n                    isMenu: false,\n                    isSimple: true\n                  }),\n                  children: \"Create new\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n                children: /*#__PURE__*/_jsxDEV(SimpleHistory, {\n                  data: this.state.simpleResponses,\n                  editForm: id => this.editSimpleForm(id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"main-menu-button\",\n          onClick: () => this.setState({\n            isSimple: false,\n            isMenu: false\n          }),\n          children: \"Complex ISBAR\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this);\n    } else if (this.state.loaded && this.state.isSimple) {\n      return /*#__PURE__*/_jsxDEV(IsbarSimpleApp, {\n        goBack: this.backToMenu.bind(this),\n        formID: this.state.simpleFormID // this is the response object passed.\n        ,\n        create: this.state.createNew,\n        questionnaireID: this.state.questionnaireID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this);\n    } else if (this.state.loaded && !this.state.isSimple) {\n      return (\n        /*#__PURE__*/\n        // <IsbarComplexDevelopment />\n        _jsxDEV(IsbarComplexApp, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 17\n        }, this)\n      );\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }, this);\n    }\n  }\n\n}\n\nAppController.contextType = IsbarClientContext;\nconst isbarQuestionnaire = {\n  \"resourceType\": \"Questionnaire\",\n  \"title\": \"questionnaireTitle\",\n  \"name\": \"isbar-simple\",\n  \"status\": \"active\",\n  // Introduction\n  \"item\": [{\n    \"linkid\": \"1\",\n    \"text\": \"I:Identify\",\n    \"type\": \"text\" // free text\n\n  }, // Situation\n  {\n    \"linkid\": \"2\",\n    \"text\": \"S:Situation\",\n    \"type\": \"text\" // free text\n\n  }, // Observation. Enable option is not included, because it could be handled by js.\n  {\n    \"linkid\": \"3\",\n    \"text\": \"O:Observation\",\n    \"type\": \"text\" // free text\n\n  }, // Background\n  {\n    \"linkid\": \"4\",\n    \"text\": \"B:Background\",\n    \"type\": \"text\" // free text\n\n  }, // assessment\n  {\n    \"linkid\": \"5\",\n    \"text\": \"A:Assessment\",\n    \"type\": \"text\" // free text\n\n  }, // Recommendation\n  {\n    \"linkid\": \"6\",\n    \"text\": \"R:Recommendation\",\n    \"type\": \"text\" // free text\n\n  }]\n};","map":{"version":3,"sources":["/Users/sophia/COMP3820-ISBAR/src/Home.js"],"names":["React","IsbarClientProvider","IsbarSimpleApp","IsbarComplexApp","IsbarComplexDevelopment","IsbarClientContext","Stack","Box","Container","Accordion","AccordionSummary","Typography","Button","AccordionDetails","ExpandMoreIcon","SimpleHistory","Home","Component","render","AppController","constructor","props","state","loaded","isMenu","isSimple","questionnaireID","simpleResponses","createNew","simpleFormID","editSimpleForm","bind","componentDidMount","loadSimple","loadQuestionnaireID","then","res","loadSimpleIsbars","setState","Promise","all","console","log","backToMenu","context","client","request","isbarQuestionnaire","name","response","total","create","entry","resource","result","id","catch","error","patient","resolveReferences","filter","element","padding","width","textAlign","fontSize","flexShrink","contextType"],"mappings":"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","sourcesContent":["// Main class for the main screen. Contains everything.\nimport React from \"react\";\nimport { IsbarClientProvider } from \"./IsbarFhirClient\";\nimport { IsbarSimpleApp } from \"./app-simple/IsbarSimpleApp\";\nimport { IsbarComplexApp } from \"./app-complex/IsbarComplexApp\";\nimport { IsbarComplexDevelopment } from \"./app-complex/IsbarComplexDevelopment\";\nimport { IsbarClientContext } from \"./IsbarFhirClient\";\nimport { Stack, Box, Container, Accordion, AccordionSummary, Typography, Button, AccordionDetails } from '@mui/material'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport { SimpleHistory } from \"./SimpleHistory\";\n\nexport default class Home extends React.Component {\n\n    render() {\n        return (\n            <IsbarClientProvider>\n                <AppController />\n            </IsbarClientProvider>\n        )\n    }\n}\n\n// this component loads and displays the questionnaireResponse\nclass AppController extends React.Component {\n\n    // include client \n    static contextType = IsbarClientContext;\n    constructor(props) {\n        super(props)\n        this.state = {\n            loaded: false,\n            isMenu: true,\n            isSimple: true,\n            questionnaireID: null,\n            simpleResponses: null,\n            createNew: false,\n            // id of current simple form\n            simpleFormID: null\n        }\n        this.editSimpleForm = this.editSimpleForm.bind(this)\n    }\n    componentDidMount() {\n\n        // Load questionnaire and simple isbar forms for this patient\n        const loadSimple = this.loadQuestionnaireID()\n            // .then(() => this.createSimpleIsbar())\n            .then((res) => this.loadSimpleIsbars(res))\n            .then(() => this.setState({ loaded: true }))\n        // this.context.client.request(\"Practitioner/e443ac58-8ece-4385-8d55-775c1b8f3a37\").then(console.log)\n        // wait till all promises resolved\n        Promise.all([loadSimple]).then(() => console.log(\"all loaded\"))\n    }\n\n    backToMenu() {\n        // change the statte to come back to menu, and start loading\n        this.setState({isMenu: true, loaded: false})\n        this.loadSimpleIsbars(this.state.questionnaireID)\n        .then(() => this.setState({loaded: true}))\n        \n    }\n\n    // Returns a promise that loads questionnaire ID using questionnaire template\n    // updates the state for questionnaire id\n    // the promise resolves to questionnaire id\n    loadQuestionnaireID() {\n\n        // make server calls \n        return this.context.client.request(\"Questionnaire?name=\" + isbarQuestionnaire.name)\n            .then((response) => {\n\n                if (response.total === 0) {\n                    // there are no questionnaire object - create one\n                    return this.context.client.create(isbarQuestionnaire);\n                } else {\n                    // return the existing questionnaire to be saved\n                    return response.entry[0].resource;\n                }\n            }).then((result) => {\n                // console.log(result.id)\n                // save the questionnaire ID in current component state\n                this.setState({ questionnaireID: result.id })\n                // return the questionnaire id. This allows response searching without\n                // having to wait for setState to be executed\n                return result.id\n            }).catch(console.error)\n    }\n\n    // Returns a promise for loading simple isbar forms given questionnaire id.\n    // The promise resolves to the bundle returned from the server\n    loadSimpleIsbars(questionnaireID) {\n\n        return this.context.client.request(\n            // currently, retrieves all responses about this patient\n            \"QuestionnaireResponse?questionnaire=\" + questionnaireID\n            + \"&patient=Patient/\" + this.context.client.patient.id,\n            // resolves references connected to questionnaire\n            // this was not used because it caused corruption, and the data had to be loaded again.\n            { resolveReferences: [\"author\"] }\n        ).then((result) => {\n            // console.log(result)\n            // console.log(questionnaireID)\n            this.setState({ simpleResponses: result })\n            // console.log(result)\n            return result\n        }).catch(console.error)\n    }\n\n    // opens existing form to edit. id is the questionnaireResponse id.\n    editSimpleForm(id){\n        // the simple form should be passed as a prop to child object?\n        const response = this.state.simpleResponses.entry.filter((element) => element.resource.id === id)\n        console.log(response)\n        console.log(response[0].resource.id)\n        // search the server for questionnaireResponse with same id\n        // The resource is retrieved again rather than being set from the bundle\n        // because bundle contains resolved references, it results in corruption\n        this.setState({simpleFormID: response[0].resource.id, isMenu: false, isSimple: true, createNew: false})\n    }\n\n    // What a mess! requires cleaning..\n    render() {\n\n        if (this.state.loaded && this.state.isMenu) {\n            return (\n                <div>\n                    <Box sx={{\n                        padding: '3%'\n                    }}>\n                        {/* Heading needs fixing */}\n                        <Typography sx={{\n                            width: '100%',\n                            textAlign: 'center',\n                            fontSize: '30px'\n                        }}>\n                            ISBAR Handover Form\n                        </Typography>\n\n                        {/* Stack requires positioning */}\n                        <Stack spacing={2}\n                            sx={{\n\n                            }}\n                        >\n                            <Accordion defaultExpanded={false}>\n                                <AccordionSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel1bh-content\"\n                                    id=\"panel1bh-header\"\n                                >\n                                    <Typography sx={{ width: '70%', flexShrink: 0 }}>\n                                        Simple ISBAR handover forms\n                                    </Typography>\n                                    <Button\n                                        onClick={() => this.setState({ createNew: true, isMenu: false, isSimple: true })}\n                                    >\n                                        Create new\n                                    </Button>\n                                </AccordionSummary>\n                                <AccordionDetails>\n                                    <SimpleHistory \n                                    data={this.state.simpleResponses} \n                                    editForm={(id) => this.editSimpleForm(id)}\n                                    />\n                                </AccordionDetails>\n                            </Accordion>\n                        </Stack>\n                    </Box>\n\n                    <button className=\"main-menu-button\" onClick={() => this.setState({ isSimple: false, isMenu: false })}>\n                        Complex ISBAR\n                    </button>\n                </div>\n            )\n        } else if (this.state.loaded && this.state.isSimple) {\n\n            return (\n                <IsbarSimpleApp\n                    goBack={this.backToMenu.bind(this)}\n                    formID={this.state.simpleFormID} // this is the response object passed.\n                    create={this.state.createNew}\n                    questionnaireID={this.state.questionnaireID}\n                />\n            )\n        } else if (this.state.loaded && !this.state.isSimple) {\n            return (\n                // <IsbarComplexDevelopment />\n                <IsbarComplexApp />\n            )\n        } else {\n            return (<div>Loading</div>)\n\n        }\n    }\n}\n\n\n\nconst isbarQuestionnaire = {\n    \"resourceType\": \"Questionnaire\",\n    \"title\": \"questionnaireTitle\",\n    \"name\": \"isbar-simple\",\n    \"status\": \"active\",\n    // Introduction\n    \"item\": [{\n        \"linkid\": \"1\",\n        \"text\": \"I:Identify\",\n        \"type\": \"text\" // free text\n    },\n    // Situation\n    {\n        \"linkid\": \"2\",\n        \"text\": \"S:Situation\",\n        \"type\": \"text\" // free text\n    },\n    // Observation. Enable option is not included, because it could be handled by js.\n    {\n        \"linkid\": \"3\",\n        \"text\": \"O:Observation\",\n        \"type\": \"text\" // free text\n    },\n    // Background\n    {\n        \"linkid\": \"4\",\n        \"text\": \"B:Background\",\n        \"type\": \"text\" // free text\n    },\n    // assessment\n    {\n        \"linkid\": \"5\",\n        \"text\": \"A:Assessment\",\n        \"type\": \"text\" // free text\n    },\n    // Recommendation\n    {\n        \"linkid\": \"6\",\n        \"text\": \"R:Recommendation\",\n        \"type\": \"text\" // free text\n    }]\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}