{"ast":null,"code":"var _jsxFileName = \"/Users/sophia/COMP3820-ISBAR/src/app-simple/IsbarSimpleApp.js\";\nimport React from \"react\";\nimport { IsbarClientContext } from \"../IsbarFhirClient\";\nimport { SimplePDF } from \"./SimplePDF\";\nimport { PDFDownloadLink } from \"@react-pdf/renderer\";\nimport SimpleTextArea from \"../common/SimpleTextArea\";\nimport { Stack, Grid, Typography, Button } from '@mui/material';\nimport { FormControlLabel, Switch } from \"@mui/material\";\nimport FHIRAutocomplete from \"../common/FHIRAutocomplete\";\nimport { getSimpleName } from \"../common/DisplayHelper\";\nimport { ArrowBack } from \"@mui/icons-material\"; // Class for the input field group.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class IsbarSimpleApp extends React.Component {\n  // the this.context.client is the client object!!!\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n      // questionnaire response object\n      content: null,\n      // turns true if it's isobar\n      isIsobar: false,\n      // indicates saved state\n      published: false,\n      // indicates updated state.\n      uploaded: true,\n      recipient: null\n    };\n    this.updateFieldValue = this.updateFieldValue.bind(this);\n    this.onRecipientSelect = this.onRecipientSelect.bind(this);\n    this.createNewForm = this.createNewForm.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(this.props.create);\n\n    if (this.props.create) {\n      // create new resource and store that \n      // new form targets to current practitiner\n      const newForm = newQuestionnaireResponse(this.props.questionnaireID, this.context.client.patient.id, this.context.client.user.id); // always create a new form when approached this way\n\n      this.setState({\n        content: newForm,\n        loaded: true\n      }); // this.context.client.create(newForm)\n      //   .then((res) => {\n      //     // console.log(res)\n      //     this.setState({ content: res, loaded: true })\n      //   })\n    } else {\n      // note we are not directly modifying the file in parent.\n      // parent will fetch the updated version via database query\n      this.context.client.request(\"QuestionnaireResponse/\" + this.props.formID).then(res => {\n        // res is the questionnaire object\n        console.log(res);\n        this.setState({\n          content: res\n        }); // turn on isobar if the given form is isobar\n\n        if (res.item[2].hasOwnProperty('answer')) {\n          this.setState({\n            isIsobar: true\n          });\n        }\n\n        if (res.hasOwnProperty('extension')) {\n          return this.context.client.request(res.extension[0].valueReference.reference);\n        }\n      }).then(res => {\n        // res is practitioner resource of recipient practitioner\n        this.setState({\n          recipient: res,\n          loaded: true,\n          published: true\n        });\n      });\n    }\n  }\n\n  createNewForm() {\n    // upload the new form\n    if (!this.state.published) {\n      this.context.client.create(this.state.content).then(res => {\n        this.setState({\n          content: res,\n          published: true\n        });\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    this.uploadToServer();\n  } // function to send upload request\n  // checks if requires uploading\n\n\n  uploadToServer() {\n    if (!this.state.uploaded && this.state.published) {\n      // console.log(this.state.content)\n      this.context.client.update(this.state.content).then(res => {\n        this.setState({\n          uploaded: true\n        });\n        console.log(res);\n      });\n    }\n  }\n\n  getFieldValue(index) {\n    return this.state.content.item[index].hasOwnProperty('answer') ? this.state.content.item[index].answer[0].valueString : \"\";\n  } // update the isbar form field of given index to the value given\n\n\n  updateFieldValue(value, index) {\n    const prevContent = this.state.content;\n\n    if (prevContent.item[index].hasOwnProperty('answer')) {\n      prevContent.item[index].answer[0].valueString = value;\n    } else {\n      prevContent.item[index].answer = [{\n        valueString: value\n      }];\n    }\n\n    this.setState({\n      content: prevContent,\n      uploaded: false\n    });\n  } // gets triggered when recipient is selected\n  // value is the value from the autocomplete\n\n\n  onRecipientSelect(value) {\n    if (!value) {\n      return;\n    } // reviewer is the name of extension\n\n\n    const newContent = this.state.content; // console.log(newContent)\n\n    if (newContent.extension) {\n      if (newContent.extension[0].hasOwnProperty('valueReference')) {\n        newContent.extension[0].valueReference.reference = \"Practitioner/\" + value.id;\n      } else {\n        newContent.extension[0].valueReference = {\n          reference: \"Practitioner/\" + value.id\n        };\n      }\n    } else {\n      newContent.extension = [{\n        url: \"http://hl7.org/fhir/StructureDefinition/questionnaireresponse-reviewer\",\n        valueReference: {\n          reference: \"Practitioner/\" + value.id\n        }\n      }];\n    }\n\n    this.setState({\n      content: newContent,\n      uploaded: false\n    });\n  } // Load the text fields after the questionnaire and questionnaire responses are loaded.\n\n\n  render() {\n    // questionnaire response object\n    if (this.state.loaded) {\n      return /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          align: \"center\",\n          justify: \"center\",\n          sx: {\n            borderBottomWidth: '1px',\n            borderBottomColor: 'text.secondary',\n            borderBottomStyle: 'solid',\n            padding: \"10px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 3,\n            sx: {\n              color: \"text.primary\"\n            },\n            children: /*#__PURE__*/_jsxDEV(ArrowBack, {\n              onClick: this.props.goBack,\n              sx: {\n                fontSize: \"30px\",\n                // padding: \"5px\",\n                cursor: \"pointer\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              align: \"center\",\n              children: \"Simple ISBAR Form\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"ISOBAR\",\n              control: /*#__PURE__*/_jsxDEV(Switch, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 26\n              }, this),\n              checked: this.state.isIsobar,\n              label: \"ISOBAR\",\n              labelPlacement: \"start\",\n              onChange: event => this.setState({\n                isIsobar: event.target.checked\n              }),\n              sx: {\n                alignSelf: 'center'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          spacing: 3,\n          sx: {\n            padding: '3%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 8,\n              children: /*#__PURE__*/_jsxDEV(FHIRAutocomplete, {\n                resourceName: \"Practitioner\",\n                searchTerm: \"name\",\n                label: \"Recipient\",\n                id: \"recipientAutocomplete\",\n                initialValue: this.state.recipient ? {\n                  label: getSimpleName(this.state.recipient.name[0]),\n                  id: this.state.recipient.id\n                } : null,\n                queries: [],\n                onSelect: value => this.onRecipientSelect(value),\n                getLabel: resource => getSimpleName(resource.name[0])\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 2,\n              justifySelf: \"center\",\n              alignSelf: \"center\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                size: \"large\",\n                variant: \"outlined\",\n                fullWidth: true,\n                children: /*#__PURE__*/_jsxDEV(PDFDownloadLink, {\n                  document: /*#__PURE__*/_jsxDEV(SimplePDF, {\n                    content: this.state.content\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 246,\n                    columnNumber: 23\n                  }, this),\n                  fileName: \"isbar.pdf\",\n                  children: ({\n                    blob,\n                    url,\n                    loading,\n                    error\n                  }) => loading ? \"Preparing\" : \"Print\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 2,\n              justifySelf: \"center\",\n              alignSelf: \"center\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                size: \"large\",\n                variant: \"outlined\",\n                fullWidth: true,\n                disabled: this.state.published,\n                onClick: this.createNewForm,\n                children: \" Publish\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SimpleTextArea, {\n            initialValue: this.getFieldValue(0),\n            placeholder: \"Introduction\",\n            label: \"Introduction\",\n            visible: true,\n            updateField: value => this.updateFieldValue(value, 0)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SimpleTextArea, {\n            initialValue: this.getFieldValue(1),\n            placeholder: \"Situation\",\n            label: \"Situation\",\n            visible: true,\n            updateField: value => this.updateFieldValue(value, 1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SimpleTextArea, {\n            initialValue: this.getFieldValue(2),\n            placeholder: \"Observation\",\n            label: \"Observation\",\n            visible: this.state.isIsobar,\n            updateField: value => this.updateFieldValue(value, 2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SimpleTextArea, {\n            initialValue: this.getFieldValue(3),\n            placeholder: \"Background\",\n            label: \"Background\",\n            visible: true,\n            updateField: value => this.updateFieldValue(value, 3)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SimpleTextArea, {\n            initialValue: this.getFieldValue(4),\n            placeholder: \"Assessment\",\n            label: \"Assessment\",\n            visible: true,\n            updateField: value => this.updateFieldValue(value, 4)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SimpleTextArea, {\n            initialValue: this.getFieldValue(5),\n            placeholder: \"Recommendation\",\n            label: \"Recommendation\",\n            visible: true,\n            updateField: value => this.updateFieldValue(value, 5)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-container\",\n        children: \"Loading ISBAR form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n} // function that returns a new response\n// sourceID: ID of practitioner writing this form\n// it assumes the target is not defined, target practitioner will be included later.\n\nIsbarSimpleApp.contextType = IsbarClientContext;\n\nfunction newQuestionnaireResponse(questionnaireID, patientID, sourceID) {\n  // questionnaire response resource\n  //const date = new Date()\n  // const lastModified = new Date().toJSON()\n  // console.log(lastModified)\n  var qResponse = {\n    resourceType: \"QuestionnaireResponse\",\n    text: {\n      name: \"isbar handover form\"\n    },\n    // maybe later when we sort out the thingy\n    // Reference the questionnaire\n    // date this form was last modified\n    // authored: lastModified,\n    questionnaire: \"Questionnaire/\" + questionnaireID,\n    status: \"in-progress\",\n    subject: {\n      reference: \"Patient/\" + patientID\n    },\n    author: {\n      // refer to current practitioner\n      reference: \"Practitioner/\" + sourceID\n    },\n    // extension not used because resolving reference requires extra effort. \n    // Instead, author section is used.\n    extension: [{\n      url: \"http://hl7.org/fhir/StructureDefinition/questionnaireresponse-reviewer\",\n      valueReference: {// reference: \"Practitioner/\" + sourceID\n      }\n    }],\n    item: [{\n      linkId: \"1\",\n      text: \"I:Identify\"\n    }, {\n      linkId: \"2\",\n      text: \"S:Situation\"\n    }, {\n      linkId: \"3\",\n      text: \"O:Observation\"\n    }, {\n      linkId: \"4\",\n      text: \"B:Background\"\n    }, {\n      linkId: \"5\",\n      text: \"A:Assessment\"\n    }, {\n      linkId: \"6\",\n      text: \"R:Recommendation\"\n    }]\n  };\n  return qResponse;\n}","map":{"version":3,"sources":["/Users/sophia/COMP3820-ISBAR/src/app-simple/IsbarSimpleApp.js"],"names":["React","IsbarClientContext","SimplePDF","PDFDownloadLink","SimpleTextArea","Stack","Grid","Typography","Button","FormControlLabel","Switch","FHIRAutocomplete","getSimpleName","ArrowBack","IsbarSimpleApp","Component","constructor","props","state","loaded","content","isIsobar","published","uploaded","recipient","updateFieldValue","bind","onRecipientSelect","createNewForm","componentDidMount","console","log","create","newForm","newQuestionnaireResponse","questionnaireID","context","client","patient","id","user","setState","request","formID","then","res","item","hasOwnProperty","extension","valueReference","reference","componentDidUpdate","uploadToServer","update","getFieldValue","index","answer","valueString","value","prevContent","newContent","url","render","borderBottomWidth","borderBottomColor","borderBottomStyle","padding","color","goBack","fontSize","cursor","event","target","checked","alignSelf","label","name","resource","blob","loading","error","contextType","patientID","sourceID","qResponse","resourceType","text","questionnaire","status","subject","author","linkId"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { IsbarClientContext } from \"../IsbarFhirClient\";\nimport { SimplePDF } from \"./SimplePDF\";\nimport { PDFDownloadLink } from \"@react-pdf/renderer\";\nimport SimpleTextArea from \"../common/SimpleTextArea\";\nimport { Stack, Grid, Typography, Button } from '@mui/material'\nimport { FormControlLabel, Switch } from \"@mui/material\";\nimport FHIRAutocomplete from \"../common/FHIRAutocomplete\";\nimport { getSimpleName } from \"../common/DisplayHelper\";\nimport { ArrowBack } from \"@mui/icons-material\";\n\n\n// Class for the input field group.\nexport class IsbarSimpleApp extends React.Component {\n\n  // the this.context.client is the client object!!!\n  static contextType = IsbarClientContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n\n      loaded: false,\n      // questionnaire response object\n      content: null,\n      // turns true if it's isobar\n      isIsobar: false,\n      // indicates saved state\n      published: false,\n      // indicates updated state.\n      uploaded: true,\n      recipient: null\n    };\n\n    this.updateFieldValue = this.updateFieldValue.bind(this)\n    this.onRecipientSelect = this.onRecipientSelect.bind(this)\n    this.createNewForm = this.createNewForm.bind(this)\n  }\n\n  componentDidMount() {\n    console.log(this.props.create)\n    if (this.props.create) {\n      // create new resource and store that \n      // new form targets to current practitiner\n      const newForm = newQuestionnaireResponse(\n        this.props.questionnaireID,\n        this.context.client.patient.id,\n        this.context.client.user.id)\n      // always create a new form when approached this way\n      this.setState({content: newForm, loaded: true})\n      // this.context.client.create(newForm)\n      //   .then((res) => {\n      //     // console.log(res)\n      //     this.setState({ content: res, loaded: true })\n      //   })\n    } else {\n\n      // note we are not directly modifying the file in parent.\n      // parent will fetch the updated version via database query\n      this.context.client.request(\"QuestionnaireResponse/\" + this.props.formID)\n        .then((res) => {\n          // res is the questionnaire object\n          console.log(res)\n          this.setState({ content: res })\n          // turn on isobar if the given form is isobar\n          if (res.item[2].hasOwnProperty('answer')) {\n            this.setState({ isIsobar: true })\n          }\n          if (res.hasOwnProperty('extension')) {\n\n            return this.context.client.request(res.extension[0].valueReference.reference)\n          }\n        })\n        .then((res) => {\n          // res is practitioner resource of recipient practitioner\n          this.setState({ recipient: res, loaded: true, published: true })\n\n        })\n    }\n  }\n\n  createNewForm(){\n    // upload the new form\n    if(!this.state.published){\n      this.context.client.create(this.state.content)\n        .then((res) => {\n          \n          this.setState({ content: res, published: true })\n        })\n    }\n  }\n\n  componentDidUpdate() {\n    this.uploadToServer()\n  }\n\n  // function to send upload request\n  // checks if requires uploading\n  uploadToServer() {\n    if (!this.state.uploaded && this.state.published) {\n      // console.log(this.state.content)\n      this.context.client.update(this.state.content)\n        .then((res) => {\n          this.setState({ uploaded: true })\n          console.log(res)\n        })\n    }\n  }\n\n  getFieldValue(index) {\n    return this.state.content.item[index].hasOwnProperty('answer')\n      ? this.state.content.item[index].answer[0].valueString\n      : \"\"\n  }\n\n  // update the isbar form field of given index to the value given\n  updateFieldValue(value, index) {\n    const prevContent = this.state.content\n    if (prevContent.item[index].hasOwnProperty('answer')) {\n      prevContent.item[index].answer[0].valueString = value\n    } else {\n      prevContent.item[index].answer = [{\n        valueString: value\n      }]\n    }\n    this.setState({ content: prevContent, uploaded: false })\n  }\n\n  // gets triggered when recipient is selected\n  // value is the value from the autocomplete\n  onRecipientSelect(value) {\n\n    if(!value){\n      return\n    }\n    // reviewer is the name of extension\n    const newContent = this.state.content\n    // console.log(newContent)\n    if (newContent.extension) {\n      if (newContent.extension[0].hasOwnProperty('valueReference')) {\n        newContent.extension[0].valueReference.reference = \"Practitioner/\" + value.id\n      } else {\n        newContent.extension[0].valueReference = {\n          reference: \"Practitioner/\" + value.id\n        }\n      }\n    } else {\n      newContent.extension = [{\n        url: \"http://hl7.org/fhir/StructureDefinition/questionnaireresponse-reviewer\",\n        valueReference: {\n          reference: \"Practitioner/\" + value.id\n        }\n      }]\n    }\n    this.setState({ content: newContent, uploaded: false })\n  }\n\n  // Load the text fields after the questionnaire and questionnaire responses are loaded.\n  render() {\n    // questionnaire response object\n\n    if (this.state.loaded) {\n      return (\n        <Stack spacing={2}>\n\n          {/* Header grid */}\n          <Grid container spacing={3} align=\"center\" justify=\"center\"\n            sx={{\n              borderBottomWidth: '1px',\n              borderBottomColor: 'text.secondary',\n              borderBottomStyle: 'solid',\n              padding: \"10px\"\n            }}\n          >\n            <Grid item xs={3} sx={{\n              color: \"text.primary\",\n\n            }}>\n              <ArrowBack \n              onClick={this.props.goBack}\n              sx={{\n                fontSize: \"30px\",\n                // padding: \"5px\",\n                cursor: \"pointer\"\n              }} />\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant='h5'\n                align=\"center\"\n              >\n                Simple ISBAR Form\n              </Typography>\n            </Grid>\n\n            <Grid item xs={2}>\n              <FormControlLabel\n                value=\"ISOBAR\"\n                control={<Switch />}\n                checked={this.state.isIsobar}\n                label=\"ISOBAR\"\n                labelPlacement=\"start\"\n                onChange={(event) => this.setState({ isIsobar: event.target.checked })}\n                sx={{\n                  alignSelf: 'center'\n                }}\n              />\n            </Grid>\n          </Grid>\n\n          <Stack spacing={3}\n            sx={{\n              padding: '3%'\n            }}>\n\n            <Grid container spacing={2}\n            >\n\n              <Grid item xs={8}>\n                <FHIRAutocomplete\n                  resourceName=\"Practitioner\"\n                  searchTerm=\"name\"\n                  label=\"Recipient\"\n                  id=\"recipientAutocomplete\"\n                  initialValue={this.state.recipient ? {\n                    label: getSimpleName(this.state.recipient.name[0]),\n                    id: this.state.recipient.id\n                  } : null}\n                  queries={[]}\n                  onSelect={(value) => this.onRecipientSelect(value)}\n                  getLabel={(resource) => getSimpleName(resource.name[0])}\n                />\n              </Grid>\n\n\n              <Grid item xs={2}\n                justifySelf=\"center\"\n                alignSelf=\"center\"\n              >\n                <Button\n                  size=\"large\"\n                  variant=\"outlined\"\n                  fullWidth={true}\n                >\n                  <PDFDownloadLink\n                    document={\n                      <SimplePDF content={this.state.content} />\n                    }\n                    fileName=\"isbar.pdf\"\n                  >\n                    {({ blob, url, loading, error }) =>\n                      loading ? \"Preparing\" : \"Print\"\n                    }\n                  </PDFDownloadLink>\n                </Button>\n              </Grid>\n              <Grid item xs={2}\n                justifySelf=\"center\"\n                alignSelf=\"center\"\n              >\n                <Button\n                  size=\"large\"\n                  variant=\"outlined\"\n                  fullWidth={true}\n                  disabled={this.state.published}\n                    onClick={this.createNewForm}\n                > Publish\n                </Button>\n\n              </Grid>\n\n            </Grid>\n            <SimpleTextArea\n              initialValue={this.getFieldValue(0)}\n              placeholder=\"Introduction\"\n              label=\"Introduction\"\n              visible={true}\n              updateField={(value) => this.updateFieldValue(value, 0)}\n            />\n            <SimpleTextArea\n              initialValue={this.getFieldValue(1)}\n              placeholder=\"Situation\"\n              label=\"Situation\"\n              visible={true}\n              updateField={(value) => this.updateFieldValue(value, 1)}\n            />\n            <SimpleTextArea\n              initialValue={this.getFieldValue(2)}\n              placeholder=\"Observation\"\n              label=\"Observation\"\n              visible={this.state.isIsobar}\n              updateField={(value) => this.updateFieldValue(value, 2)}\n            />\n            <SimpleTextArea\n              initialValue={this.getFieldValue(3)}\n              placeholder=\"Background\"\n              label=\"Background\"\n              visible={true}\n              updateField={(value) => this.updateFieldValue(value, 3)}\n            />\n            <SimpleTextArea\n              initialValue={this.getFieldValue(4)}\n              placeholder=\"Assessment\"\n              label=\"Assessment\"\n              visible={true}\n              updateField={(value) => this.updateFieldValue(value, 4)}\n            />\n            <SimpleTextArea\n              initialValue={this.getFieldValue(5)}\n              placeholder=\"Recommendation\"\n              label=\"Recommendation\"\n              visible={true}\n              updateField={(value) => this.updateFieldValue(value, 5)}\n            />\n\n          </Stack >\n        </Stack>\n      )\n    } else {\n      return (\n\n        <div className=\"loading-container\">\n          Loading ISBAR form\n        </div>\n      )\n    }\n  }\n}\n\n// function that returns a new response\n// sourceID: ID of practitioner writing this form\n// it assumes the target is not defined, target practitioner will be included later.\nfunction newQuestionnaireResponse(questionnaireID, patientID, sourceID) {\n  // questionnaire response resource\n  //const date = new Date()\n  // const lastModified = new Date().toJSON()\n  // console.log(lastModified)\n\n  var qResponse = {\n    resourceType: \"QuestionnaireResponse\",\n    text: { name: \"isbar handover form\" },\n    // maybe later when we sort out the thingy\n    // Reference the questionnaire\n    // date this form was last modified\n    // authored: lastModified,\n    questionnaire: \"Questionnaire/\" + questionnaireID,\n    status: \"in-progress\",\n    subject: {\n      reference: \"Patient/\" + patientID\n    },\n    author: {\n      // refer to current practitioner\n      reference: \"Practitioner/\" + sourceID,\n    },\n    // extension not used because resolving reference requires extra effort. \n    // Instead, author section is used.\n    extension: [{\n      url: \"http://hl7.org/fhir/StructureDefinition/questionnaireresponse-reviewer\",\n      valueReference: {\n        // reference: \"Practitioner/\" + sourceID\n      }\n    }],\n    item: [\n      {\n        linkId: \"1\",\n        text: \"I:Identify\",\n      },\n      {\n        linkId: \"2\",\n        text: \"S:Situation\",\n      },\n      {\n        linkId: \"3\",\n        text: \"O:Observation\",\n      },\n      {\n        linkId: \"4\",\n        text: \"B:Background\",\n      },\n      {\n        linkId: \"5\",\n        text: \"A:Assessment\",\n      },\n      {\n        linkId: \"6\",\n        text: \"R:Recommendation\",\n      },\n    ],\n  };\n\n  return qResponse;\n}"]},"metadata":{},"sourceType":"module"}