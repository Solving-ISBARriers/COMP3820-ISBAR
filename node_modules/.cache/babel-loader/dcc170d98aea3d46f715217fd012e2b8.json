{"ast":null,"code":"var _jsxFileName = \"/Users/sophia/COMP3820-ISBAR/src/SimpleHistory.js\";\nimport React from \"react\";\nimport { DataGrid } from '@mui/x-data-grid';\nimport { getSimpleName, getDateTimeString } from \"./common/DisplayHelper\";\nimport { IsbarClientContext } from \"./IsbarFhirClient\"; // this displays the list of previous simple isbar entries\n// takes in the bundle from response\n// displays previous entries in data table of mui\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class SimpleHistory extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fields: [{\n        field: 'lastUpdated',\n        headerName: 'Last Updated',\n        description: \"Time last updated\",\n        flex: 2\n      }, {\n        field: 'id',\n        headerName: 'ID',\n        description: \"Form ID\",\n        flex: 2\n      }, {\n        field: 'author',\n        headerName: 'Author',\n        description: \"Author of the form\",\n        flex: 3\n      }, {\n        field: 'recipient',\n        headerName: 'Recipient',\n        description: \"Receiving party of the form\",\n        flex: 3\n      }, {\n        field: 'action',\n        headerName: 'Action',\n        description: \"Actions allowed on the form\",\n        cellClassName: 'simple-table--cell',\n        align: 'center',\n        headerAlign: 'center',\n        width: 100\n      }],\n      entries: null\n    };\n  }\n\n  componentDidMount() {\n    // load all the data from prop\n    console.log(\"history\");\n    console.log(this.props.data);\n\n    if (this.props.data) {\n      this.updateTable();\n    } else {\n      console.error(\"No data given to history!! did the request fail?\");\n    }\n  } // manually resolve the recipient..\n\n\n  updateTable() {\n    const newContent = []; // console.log(this.props.data)\n\n    if (this.props.data.total != 0) {\n      this.props.data.entry.forEach(element => {\n        // element is each resource in the bundle\n        // console.log(element)\n        const resource = element.resource; // this.context.client.delete(\"QuestionnaireResponse/\"+resource.id)})}\n        // default content for the fields.\n        // Also displayed while resolving promises\n\n        const entry = {\n          lastUpdated: 'Loading',\n          id: 'Loading',\n          author: 'Loading',\n          recipient: 'Loading',\n          action: null\n        }; // set new content??\n\n        if (resource.meta.hasOwnProperty('lastUpdated')) {\n          entry.lastUpdated = getDateTimeString(resource.meta.lastUpdated);\n        }\n\n        if (resource.hasOwnProperty('id')) {\n          entry.id = resource.id;\n        }\n\n        if (resource.hasOwnProperty('author')) {\n          entry.author = getSimpleName(resource.author.name[0]);\n        }\n\n        entry.action = \"EDIT\";\n        newContent.push(entry);\n      }); // resolve the recipients of each.\n      // This function was positioned after initialisation of array to enable access\n\n      this.props.data.entry.forEach((element, index) => {\n        const resource = element.resource;\n\n        if (resource.hasOwnProperty('extension')) {\n          this.context.client.request(resource.extension[0].valueReference.reference).then(res => {\n            // console.log(newContent[index])\n            newContent[index].recipient = getSimpleName(res.name[0]); // force component update\n\n            this.forceUpdate();\n          });\n        }\n      });\n    } else {\n      console.log(\"no existing entry\");\n    }\n\n    this.setState({\n      entries: newContent\n    });\n  }\n\n  handleCellClick(cellParam) {\n    // handle cell click\n    if (cellParam.colDef.field === \"action\") {\n      // edit button is pressed. cell id is the form id\n      this.props.editForm(cellParam.id);\n    }\n  }\n\n  render() {\n    // console.log(this.state.entries)\n    if (this.state.entries != null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 400,\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: this.state.entries,\n          columns: this.state.fields,\n          pageSize: 5,\n          rowsPerPageOptions: [5],\n          disableColumnMenu: true,\n          disableSelectionOnClick: true,\n          onCellClick: param => {\n            if (param.colDef.field === \"action\") {\n              this.props.editForm(param.id);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading data..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\nSimpleHistory.contextType = IsbarClientContext;","map":{"version":3,"sources":["/Users/sophia/COMP3820-ISBAR/src/SimpleHistory.js"],"names":["React","DataGrid","getSimpleName","getDateTimeString","IsbarClientContext","SimpleHistory","Component","constructor","props","state","fields","field","headerName","description","flex","cellClassName","align","headerAlign","width","entries","componentDidMount","console","log","data","updateTable","error","newContent","total","entry","forEach","element","resource","lastUpdated","id","author","recipient","action","meta","hasOwnProperty","name","push","index","context","client","request","extension","valueReference","reference","then","res","forceUpdate","setState","handleCellClick","cellParam","colDef","editForm","render","height","param","contextType"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { DataGrid } from '@mui/x-data-grid'\nimport { getSimpleName, getDateTimeString } from \"./common/DisplayHelper\";\nimport { IsbarClientContext } from \"./IsbarFhirClient\";\n\n// this displays the list of previous simple isbar entries\n// takes in the bundle from response\n// displays previous entries in data table of mui\nexport class SimpleHistory extends React.Component {\n\n    static contextType = IsbarClientContext;\n    constructor(props) {\n        super(props)\n        this.state = {\n            fields: [\n                {\n                    field: 'lastUpdated',\n                    headerName: 'Last Updated',\n                    description: \"Time last updated\",\n                    flex: 2\n                },\n                {\n                    field: 'id',\n                    headerName: 'ID',\n                    description: \"Form ID\",\n                    flex: 2\n                },\n                {\n                    field: 'author',\n                    headerName: 'Author',\n                    description: \"Author of the form\",\n                    flex: 3\n                },\n                {\n                    field: 'recipient',\n                    headerName: 'Recipient',\n                    description: \"Receiving party of the form\",\n                    flex: 3\n                },\n                {\n                    field: 'action',\n                    headerName: 'Action',\n                    description: \"Actions allowed on the form\",\n                    cellClassName: 'simple-table--cell',\n                    align: 'center',\n                    headerAlign: 'center',\n                    width: 100\n                },\n            ],\n            entries: null\n        }\n    }\n\n    componentDidMount() {\n        // load all the data from prop\n        console.log(\"history\")\n        console.log(this.props.data)\n        if (this.props.data) {\n            this.updateTable()\n        }\n        else {\n            console.error(\"No data given to history!! did the request fail?\")\n        }\n    }\n\n    // manually resolve the recipient..\n    updateTable() {\n        const newContent = []\n        // console.log(this.props.data)\n        if (this.props.data.total != 0) {\n\n            this.props.data.entry.forEach((element) => {\n                // element is each resource in the bundle\n                // console.log(element)\n                const resource = element.resource\n                // this.context.client.delete(\"QuestionnaireResponse/\"+resource.id)})}\n\n                // default content for the fields.\n                // Also displayed while resolving promises\n                const entry = {\n                    lastUpdated: 'Loading',\n                    id: 'Loading',\n                    author: 'Loading',\n                    recipient: 'Loading',\n                    action: null\n                }\n                // set new content??\n                if (resource.meta.hasOwnProperty('lastUpdated')) {\n                    entry.lastUpdated = getDateTimeString(resource.meta.lastUpdated)\n                }\n                if (resource.hasOwnProperty('id')) {\n                    entry.id = resource.id\n                }\n                if (resource.hasOwnProperty('author')) {\n                    entry.author = getSimpleName(resource.author.name[0])\n                }\n                entry.action = \"EDIT\"\n                newContent.push(entry)\n            });\n\n            // resolve the recipients of each.\n            // This function was positioned after initialisation of array to enable access\n            this.props.data.entry.forEach((element, index) => {\n                const resource = element.resource\n                if (resource.hasOwnProperty('extension')) {\n                    this.context.client.request(resource.extension[0].valueReference.reference)\n                        .then((res) => {\n                            // console.log(newContent[index])\n                            newContent[index].recipient = getSimpleName(res.name[0])\n                            // force component update\n                            this.forceUpdate()\n                        })\n                }\n            })\n        }\n        else {\n            console.log(\"no existing entry\")\n        }\n        this.setState({ entries: newContent })\n            \n    }\n\n    handleCellClick(cellParam) {\n        // handle cell click\n        if (cellParam.colDef.field === \"action\") {\n            // edit button is pressed. cell id is the form id\n            this.props.editForm(cellParam.id)\n        }\n    }\n\n    render() {\n        // console.log(this.state.entries)\n        if (this.state.entries != null) {\n\n            return (\n                <div style={{ height: 400, width: '100%' }}>\n\n                    <DataGrid\n                        rows={this.state.entries}\n                        columns={this.state.fields}\n                        pageSize={5}\n                        rowsPerPageOptions={[5]}\n                        disableColumnMenu={true}\n                        disableSelectionOnClick={true}\n                        onCellClick={(param) => {\n                            if (param.colDef.field === \"action\") {\n                                this.props.editForm(param.id)\n                            }\n                        }}\n                    />\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    Loading data..\n                </div>\n            )\n        }\n\n\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}