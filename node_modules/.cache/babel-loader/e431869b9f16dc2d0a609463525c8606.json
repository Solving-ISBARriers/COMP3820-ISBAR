{"ast":null,"code":"var _jsxFileName = \"/Users/sophia/COMP3820-ISBAR/src/common/FHIRAutocomplete.js\";\nimport React from \"react\";\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport { IsbarClientContext } from \"../IsbarFhirClient\"; // autocomplete that displays values based on fhir search query.\n// takes in fields as props\n// should return the target resource\n// onSelect prop triggered when there is a value selection\n// getLabel prop is to retrieve relevant label from the resource\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class FHIRAutocomplete extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      answerSet: [],\n      // value from select\n      value: this.props.initialValue,\n      // input is what is entered\n      input: \"\",\n      timeout: null,\n      delay: 500\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.updatAnswerSet(\"\"); // console.log(this.state.value)\n    // this.setState({value: this.props.defaultValue})\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.timeout);\n  } // update the answer set by searching the fhir server with given input\n  // input is taken as an argument because this.state.input may cause errors\n  // due to setState not being synchronous\n\n\n  updatAnswerSet(input) {\n    var queryString = this.props.resourceName;\n    var inputString = \"\";\n    const inputArr = input.split(\" \");\n    inputArr.forEach(element => {\n      inputString = inputString + this.props.searchTerm + \"=\" + element + \"&\";\n    }); // check queries\n\n    if (this.props.queries && this.props.queries[0]) {\n      this.props.queries.forEach((element, index) => {\n        // append the search terms\n        index === 0 ? queryString = queryString + \"?\" + element : queryString = queryString + \"&\" + element;\n      }); // this searches our value\n\n      queryString = queryString + \"&\" + inputString;\n    } else {\n      queryString = queryString + \"?\" + inputString;\n    } // console.log(queryString)\n\n\n    this.context.client.request(queryString).then(res => {\n      const resources = [];\n\n      if (res.total > 0) {\n        res.entry.forEach(element => {\n          // console.log(element)\n          // need to give it label property and all that\n          resources.push({\n            label: this.props.getLabel(element.resource),\n            id: element.resource.id\n          }); // resources.push(element.resource)\n        });\n      } // console.log(resources)\n\n\n      this.setState({\n        answerSet: resources\n      });\n    });\n  }\n\n  handleInputChange(event, newInput) {\n    this.setState({\n      input: newInput\n    });\n    clearTimeout(this.state.timeout);\n    this.setState({\n      timeout: setTimeout(() => {\n        this.updatAnswerSet(newInput);\n      }, this.state.delay)\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Autocomplete, {\n      disablePortal: true,\n      autoSelect: true,\n      value: this.state.value,\n      onChange: (event, newValue) => {\n        this.setState({\n          value: newValue\n        });\n        this.props.onSelect(newValue);\n        console.log(newValue);\n      },\n      input: this.state.input,\n      onInputChange: (event, newInput) => this.handleInputChange(event, newInput),\n      id: this.props.id,\n      options: this.state.answerSet,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        label: this.props.label,\n        sx: {\n          borderWidth: '0'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nFHIRAutocomplete.contextType = IsbarClientContext;","map":{"version":3,"sources":["/Users/sophia/COMP3820-ISBAR/src/common/FHIRAutocomplete.js"],"names":["React","Autocomplete","TextField","IsbarClientContext","FHIRAutocomplete","Component","constructor","props","state","answerSet","value","initialValue","input","timeout","delay","handleInputChange","bind","componentDidMount","updatAnswerSet","componentWillUnmount","clearTimeout","queryString","resourceName","inputString","inputArr","split","forEach","element","searchTerm","queries","index","context","client","request","then","res","resources","total","entry","push","label","getLabel","resource","id","setState","event","newInput","setTimeout","render","newValue","onSelect","console","log","params","borderWidth","contextType"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport { IsbarClientContext } from \"../IsbarFhirClient\";\n\n// autocomplete that displays values based on fhir search query.\n// takes in fields as props\n// should return the target resource\n// onSelect prop triggered when there is a value selection\n// getLabel prop is to retrieve relevant label from the resource\nexport default class FHIRAutocomplete extends React.Component {\n\n    static contextType = IsbarClientContext;\n    constructor(props) {\n        super(props)\n        this.state = {\n            answerSet: [],\n            // value from select\n            value: this.props.initialValue,\n            // input is what is entered\n            input: \"\",\n            timeout: null,\n            delay: 500\n        }\n        this.handleInputChange = this.handleInputChange.bind(this)\n    }\n\n    componentDidMount() {\n        this.updatAnswerSet(\"\")\n        // console.log(this.state.value)\n        // this.setState({value: this.props.defaultValue})\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.state.timeout)\n    }\n\n    // update the answer set by searching the fhir server with given input\n    // input is taken as an argument because this.state.input may cause errors\n    // due to setState not being synchronous\n    updatAnswerSet(input) {\n        var queryString = this.props.resourceName\n        var inputString = \"\"\n        const inputArr = input.split(\" \")\n        inputArr.forEach((element => {\n\n            inputString = inputString + this.props.searchTerm + \"=\" + element + \"&\"\n        }))\n        // check queries\n        if(this.props.queries && this.props.queries[0]){\n            this.props.queries.forEach((element, index) => {\n                // append the search terms\n                index === 0\n                    ? queryString = queryString + \"?\" + element\n                    : queryString = queryString + \"&\" + element\n            })\n            // this searches our value\n            queryString = queryString + \"&\" + inputString\n        } else{\n            queryString = queryString + \"?\" + inputString\n        }\n        // console.log(queryString)\n        this.context.client.request(queryString)\n            .then((res) => {\n                const resources = []\n                if(res.total > 0){\n                    res.entry.forEach(element => {\n                        // console.log(element)\n                        // need to give it label property and all that\n                        resources.push({label: this.props.getLabel(element.resource), id:element.resource.id})\n                        // resources.push(element.resource)\n                    })\n\n                }\n                // console.log(resources)\n                this.setState({ answerSet: resources })\n            })\n        \n    }\n\n    handleInputChange(event, newInput) {\n        \n        this.setState({ input: newInput })\n        \n        clearTimeout(this.state.timeout)\n        this.setState({\n\n            timeout: setTimeout(() => { this.updatAnswerSet(newInput) },\n                this.state.delay)\n        })\n\n    }\n\n    render() {\n        return (\n            <Autocomplete\n                disablePortal\n                autoSelect={true}\n                value={this.state.value}\n                onChange={(event, newValue) => {\n                    this.setState({ value: newValue })\n                    this.props.onSelect(newValue)\n                    console.log(newValue)\n                }}\n                input={this.state.input}\n                onInputChange={(event, newInput) => this.handleInputChange(event, newInput)}\n                id={this.props.id}\n                options={ this.state.answerSet }\n                renderInput={(params) => \n                    <TextField {...params}\n                        label={this.props.label}\n                        sx={{\n                            borderWidth:'0'\n                            \n                        }}\n                    />\n                }\n            />\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}